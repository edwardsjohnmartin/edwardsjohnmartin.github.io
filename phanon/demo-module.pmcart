{"id":29,"created_at":"2019-08-14T13:40:00.665Z","updated_at":"2020-07-30T19:58:20.923Z","title":"Introduction","completed":false,"prerequisites":null,"position":0,"course_id":23,"completed_at":null,"type":"module","lessons":[{"id":18,"title":"0 - print","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":0,"published":null,"created_at":"2019-08-14T13:40:12.375Z","updated_at":"2019-08-16T18:44:47.020Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":177,"title":null,"prerequisites":null,"position":0,"instructions":"Press the run button. The following will be printed to the screen:\n\n```\nHello world\n```\n\nChange the program to print\n\n```\nHello world!\n```\n\n*Hint: Add an exclamation mark after the `d`.*","solution_code":"print(\"Hello world!\")\n\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello world\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\nphanon_test(out == 'Hello world!\\n', \"Success!\", \"You must print out 'Hello world!'. Be sure to add the exclamation mark.\")\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:40:18.486Z","updated_at":"2019-09-03T20:34:11.175Z","kind":"exercise"},{"id":178,"title":null,"prerequisites":null,"position":1,"instructions":"Press the run button. The following will be printed to the screen:\n\n```\nHello world!\n```\n\nChange the program to print\n\n```\nHello World!\n```\n\n*Hint: Make the ```w``` uppercase.*","solution_code":"print(\"Hello World!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello world!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"You must print out 'Hello World!'. Did you make the 'w' uppercase?\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:44:17.469Z","updated_at":"2019-09-03T20:34:30.240Z","kind":"exercise"},{"id":179,"title":null,"prerequisites":null,"position":2,"instructions":"Change the program to print\n\n```\nHello Alien!\n```","solution_code":"print(\"Hello Alien!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello World!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello Alien!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:45:52.939Z","updated_at":"2019-09-03T20:34:45.144Z","kind":"exercise"},{"id":182,"title":null,"prerequisites":null,"position":6,"instructions":"Change the code to print\n```\nHello Alien!\nGoodbye Alien!\n```\nUse only one `print` statement by adding a `\\n` after the first `Hello!`.\n\n*Heads up: don't put a space after the ```\\n```.*","solution_code":"print(\"Hello Alien!\\nGoodbye Alien!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello Alien!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello Alien!\\nGoodbye Alien!\\n', \"Success!\", \"Incorrect output.\")\nphanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:49:22.684Z","updated_at":"2019-09-03T21:14:52.019Z","kind":"exercise"},{"id":186,"title":null,"prerequisites":null,"position":10,"instructions":"This code has a compiler error. Fix the problem.","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nrint(\"Hello World!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:03:25.407Z","updated_at":"2019-09-03T21:15:37.206Z","kind":"exercise"},{"id":184,"title":null,"prerequisites":null,"position":8,"instructions":"This code has a \"compiler\" error. Run the code to see what happens then fix the problem.\n\n*Hint: it has something to do with quotes.* *Hint: if you get stuck, try looking at the previous exercise.*","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(Hello World!)\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:01:29.229Z","updated_at":"2019-09-03T21:15:17.674Z","kind":"exercise"},{"id":185,"title":null,"prerequisites":null,"position":9,"instructions":"This code has a compiler error. Run the code to see what happens then fix the problem.\n\n*Hint: A word is mispelled.*","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprin(\"Hello World!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:02:41.338Z","updated_at":"2019-09-03T21:15:27.234Z","kind":"exercise"},{"id":190,"title":null,"prerequisites":null,"position":14,"instructions":"Change the second string to `Soccer`. The following should be output:\n```\nBaseball\nSoccer\n```","solution_code":"print(\"Baseball\")\nprint(\"Soccer\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Baseball\")\nprint(\"Football\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Baseball\\nSoccer\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:08:09.048Z","updated_at":"2019-09-03T21:16:23.864Z","kind":"exercise"},{"id":199,"title":null,"prerequisites":null,"position":23,"instructions":"Print the number 7.","solution_code":"print(7)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == '7\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:20:43.545Z","updated_at":"2019-08-14T14:27:25.838Z","kind":"exercise"},{"id":193,"title":null,"prerequisites":null,"position":17,"instructions":"Write code to output\n\n```\nHello Alien!\n```","solution_code":"print(\"Hello Alien!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint()\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello Alien!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:11:28.290Z","updated_at":"2019-09-03T21:16:50.742Z","kind":"exercise"},{"id":195,"title":null,"prerequisites":null,"position":22,"instructions":"We can print things other than strings. Press run to see that the code prints 5. Change the code to print the number 6.","solution_code":"print(6)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(5)\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == '6\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:12:37.014Z","updated_at":"2019-08-14T14:27:25.874Z","kind":"exercise"},{"id":196,"title":null,"prerequisites":null,"position":19,"instructions":"Write code to output\n\n```\nHello World!\n```","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:17:42.866Z","updated_at":"2019-09-03T21:17:05.012Z","kind":"exercise"},{"id":197,"title":null,"prerequisites":null,"position":20,"instructions":"Write code to output\n\n```\nTake me out to the ballgame.\n```\n\n*Heads up: don't forget the period at the end.*","solution_code":"print(\"Take me out to the ballgame.\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Take me out to the ballgame.\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:18:06.551Z","updated_at":"2019-09-03T21:17:13.091Z","kind":"exercise"},{"id":187,"title":null,"prerequisites":null,"position":11,"instructions":"This code has multiple compiler errors. Fix the problems.","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nrint(Hello World!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:03:48.256Z","updated_at":"2019-09-03T21:15:47.049Z","kind":"exercise"},{"id":198,"title":null,"prerequisites":null,"position":21,"instructions":"Write code to output\n\n```\nPing pong\nTennis\n```\n\nYou can either use two `print` statements or separate the lines with `\\n` in a single `print` statement.\n\n*Heads up: make sure your capitalization is correct.*","solution_code":"print(\"Ping pong\\nTennis\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Ping pong\\nTennis\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:19:23.194Z","updated_at":"2019-09-03T21:17:19.612Z","kind":"exercise"},{"id":180,"title":null,"prerequisites":null,"position":3,"instructions":"We write code to create programs. Change the following code to print\n\n```\nGoodbye Alien!\n```","solution_code":"print(\"Goodbye Alien!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello Alien!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Goodbye Alien!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:46:51.037Z","updated_at":"2019-09-03T20:34:52.397Z","kind":"exercise"},{"id":191,"title":null,"prerequisites":null,"position":15,"instructions":"Fix the error. The code should print\n```\nBaseball\n```","solution_code":"print(\"Baseball\")\n\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Base\"ball\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Baseball\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:09:26.718Z","updated_at":"2019-09-03T21:16:34.742Z","kind":"exercise"},{"id":183,"title":null,"prerequisites":null,"position":7,"instructions":"Sometimes our code has errors. Run the following code to see what happens. Then add a closing quote mark to fix the problem.","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello World!)\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:59:57.551Z","updated_at":"2019-09-03T21:15:07.495Z","kind":"exercise"},{"id":200,"title":null,"prerequisites":null,"position":5,"instructions":"Press run to see the code print two lines. Putting `\\n` is the same as starting a new line. Change the code to print\n\n```\nHello Alien!\nGoodbye Alien!\n```\n","solution_code":"print(\"Hello Alien!\")\nprint(\"Goodbye Alien!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello Alien!\\nHello Alien!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello Alien!\\nGoodbye Alien!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:27:25.917Z","updated_at":"2019-09-03T21:14:40.788Z","kind":"exercise"},{"id":188,"title":null,"prerequisites":null,"position":12,"instructions":"This code has a tricky compiler error. It has to do with a quote mark. You need to remove one of them.","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello\" World!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:04:25.757Z","updated_at":"2019-09-03T21:16:00.943Z","kind":"exercise"},{"id":189,"title":null,"prerequisites":null,"position":13,"instructions":"Anything inside quote marks is called a string. Change the code to print\n```\nLove to cook!\n```\n\n*Hint: You'll replace `Hello World!` with `Love to cook!`*","solution_code":"print(\"Love to cook!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello World!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Love to cook!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:05:00.953Z","updated_at":"2019-09-03T21:16:11.808Z","kind":"exercise"},{"id":181,"title":null,"prerequisites":null,"position":4,"instructions":"Change the code to print\n\n```\nHello Alien!\nGoodbye Alien!\n```\n\n*Hint: Change only the second ```print``` statement.*","solution_code":"print(\"Hello Alien!\")\nprint(\"Goodbye Alien!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello Alien!\")\nprint(\"Hello Alien!\")\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello Alien!\\nGoodbye Alien!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T13:47:15.443Z","updated_at":"2019-09-03T20:41:26.854Z","kind":"exercise"},{"id":192,"title":null,"prerequisites":null,"position":16,"instructions":"Write code to output\n\n```\nHello World!\n```","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint()\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:10:29.727Z","updated_at":"2019-09-03T21:16:42.849Z","kind":"exercise"},{"id":194,"title":null,"prerequisites":null,"position":18,"instructions":"Write code to output\n\n```\nHello World!\n```\n\n*Heads up: don't forget the parentheses!*","solution_code":"print(\"Hello World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint\n### END_STUDENT\n\nout = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(out == 'Hello World!\\n', \"Success!\", \"Incorrect output.\")\n# phanon_test(code.find('\\\\n')>-1, \"Success!\", \"You must use the '\\\\n' character and use only one print statement.\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":18,"phanon_module_id":null,"created_at":"2019-08-14T14:12:00.274Z","updated_at":"2019-09-03T21:16:58.369Z","kind":"exercise"}]},{"id":187,"title":"18 (1) - while loops","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":23,"published":null,"created_at":"2019-09-30T16:41:46.908Z","updated_at":"2019-10-03T20:49:41.312Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":2298,"title":null,"prerequisites":null,"position":21,"instructions":"Replace `wxyz` to output\n```\n0\n1\n2\n3\n4\n5\n6\n```\n","solution_code":"count = 0 \nwhile count < 7: \n\tprint(count) \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwxyz \n\tprint(count) \n    count += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0123456'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 7:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:13:59.957Z","updated_at":"2019-09-30T17:14:28.378Z","kind":"exercise"},{"id":2304,"title":null,"prerequisites":null,"position":27,"instructions":"Write a `while` loop that outputs\n```\n1\n2\n3\n4\n5\n6\n```\n","solution_code":"count = 1\nwhile count < 7:\n\tprint(count)\n\tcount += 1","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('123456'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count<7'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:22:34.671Z","updated_at":"2019-09-30T17:25:28.185Z","kind":"exercise"},{"id":2302,"title":null,"prerequisites":null,"position":25,"instructions":"Write a `while` loop that outputs\n```\n0\n1\n2\n3\n4\n```\n","solution_code":"count = 0 \nwhile count < 5: \n\tprint(count) \n\tcount += 1","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('01234'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count+=1'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:20:53.587Z","updated_at":"2019-09-30T17:25:37.395Z","kind":"exercise"},{"id":2308,"title":null,"prerequisites":null,"position":31,"instructions":"Write a `while` loop that prints 0-99 followed by `Done!`, as follows:\n```\n0\n1\n...\n98\n99\nDone!\n```\n","solution_code":"count = 0\nwhile count < 100:\n\tprint(count)\n\tcount += 1\nprint(\"Done!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join([str(i) for i in range(100)])+'Done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count<100'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:27:51.431Z","updated_at":"2019-09-30T17:31:16.698Z","kind":"exercise"},{"id":2289,"title":null,"prerequisites":null,"position":12,"instructions":"Write a `while` loop to output:\n```\nFive times!\nFive times!\nFive times!\nFive times!\nFive times!\n```\n","solution_code":"count = 0 \nwhile count < 5: \n\tprint(\"Five times!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Five times!Five times!Five times!Five times!Five times!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 5:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:59:52.471Z","updated_at":"2019-09-30T17:00:58.734Z","kind":"exercise"},{"id":2281,"title":null,"prerequisites":null,"position":4,"instructions":"Change the `wxyz` on line 2 to output the following:\n```\nHello world!\nHello world!\nHello world!\n```\n","solution_code":"count = 0 \nwhile count < 3: \n\tprint(\"Hello world!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwxyz: \n\tprint(\"Hello world!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Hello world!Hello world!Hello world!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 3:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:55:08.468Z","updated_at":"2019-09-30T16:55:15.499Z","kind":"exercise"},{"id":2284,"title":null,"prerequisites":null,"position":7,"instructions":"Change the `x` on line 4 to output the following:\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4:\n\tprint(\"Howdy!\") \n\tcount += x\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:56:35.006Z","updated_at":"2019-09-30T16:58:43.316Z","kind":"exercise"},{"id":2300,"title":null,"prerequisites":null,"position":23,"instructions":"Change the number on line 4 to output\n```\n0\n3\n6\n```\n\nHint: right now the code counts by twos. It needs to count by threes.","solution_code":"count = 0 \nwhile count < 7: \n\tprint(count) \n\tcount += 3","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 7: \n\tprint(count) \n\tcount += 2\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('036'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 7:print(count)count+=3'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:16:22.916Z","updated_at":"2019-09-30T17:19:14.416Z","kind":"exercise"},{"id":2279,"title":null,"prerequisites":null,"position":2,"instructions":"Change the `x` on line 2 to output the following:\n```\nHello world!\nHello world!\nHello world!\n```\n","solution_code":"count = 0 \nwhile count < 3: \n\tprint(\"Hello world!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < x: \n\tprint(\"Hello world!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Hello world!Hello world!Hello world!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 3:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:53:59.226Z","updated_at":"2019-09-30T16:54:45.378Z","kind":"exercise"},{"id":2282,"title":null,"prerequisites":null,"position":5,"instructions":"Change the `wxyz` on line 2 to output the following:\n```\nHello world!\nHello world!\nHello world!\n```\n\nHeads up: don't forget the `:` at the end of line 2.","solution_code":"count = 0 \nwhile count < 3: \n\tprint(\"Hello world!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwxyz\n\tprint(\"Hello world!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Hello world!Hello world!Hello world!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 3:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:55:26.843Z","updated_at":"2019-09-30T16:55:43.148Z","kind":"exercise"},{"id":2280,"title":null,"prerequisites":null,"position":3,"instructions":"Change the `xyz` on line 2 to output the following:\n```\nHello world!\nHello world!\nHello world!\n```\n","solution_code":"count = 0 \nwhile count < 3: \n\tprint(\"Hello world!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile xyz: \n\tprint(\"Hello world!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Hello world!Hello world!Hello world!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 3:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:54:48.425Z","updated_at":"2019-09-30T16:54:58.744Z","kind":"exercise"},{"id":2288,"title":null,"prerequisites":null,"position":11,"instructions":"Write a `while` loop to output:\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:59:29.226Z","updated_at":"2019-09-30T16:59:48.181Z","kind":"exercise"},{"id":2286,"title":null,"prerequisites":null,"position":9,"instructions":"Change the `xyz` on line 4 to output the following:\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4:\n\tprint(\"Howdy!\") \n\txyz\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:57:05.768Z","updated_at":"2019-09-30T16:58:35.246Z","kind":"exercise"},{"id":2293,"title":null,"prerequisites":null,"position":16,"instructions":"Fix the bug on line 4. The code should output\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount + 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:03:09.116Z","updated_at":"2019-09-30T17:04:27.653Z","kind":"exercise"},{"id":2301,"title":null,"prerequisites":null,"position":24,"instructions":"Write a `while` loop that outputs\n```\n0\n2\n4\n6\n```\n","solution_code":"count = 0 \nwhile count < 7: \n\tprint(count) \n\tcount += 2","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0246'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count+=2'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:19:19.511Z","updated_at":"2019-09-30T17:25:43.755Z","kind":"exercise"},{"id":2277,"title":null,"prerequisites":null,"position":0,"instructions":"This code prints `Hello world!` five times. Change the number `5` on line 2 so that\nit prints `Hello world!` six times.\n\nChange only the number. Do not change the boolean operator `<`.","solution_code":"count = 0 \nwhile count < 6: \n\tprint(\"Hello world!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 5: \n\tprint(\"Hello world!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Hello world!Hello world!Hello world!Hello world!Hello world!Hello world!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 6:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:42:00.930Z","updated_at":"2019-09-30T16:53:45.390Z","kind":"exercise"},{"id":2278,"title":null,"prerequisites":null,"position":1,"instructions":"`while` loops are used to execute statements multiple times.\nThis code prints `Hello world!` five times. Change the number `5` on line 2 so that\nit prints `Hello world!` *seven* times.\n\nChange only the number. Do not change the boolean operator `<`.","solution_code":"count = 0 \nwhile count < 7: \n\tprint(\"Hello world!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 5: \n\tprint(\"Hello world!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Hello world!Hello world!Hello world!Hello world!Hello world!Hello world!Hello world!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 7:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:50:52.661Z","updated_at":"2019-09-30T16:53:50.408Z","kind":"exercise"},{"id":2283,"title":null,"prerequisites":null,"position":6,"instructions":"Change the `wxyz` on line 2 to output the following:\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n\nHeads up: don't forget the `:` at the end of line 2.","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwxyz\n\tprint(\"Howdy!\") \n\tcount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:55:49.498Z","updated_at":"2019-09-30T16:58:48.968Z","kind":"exercise"},{"id":2285,"title":null,"prerequisites":null,"position":8,"instructions":"Change the `x` on line 4 to output the following:\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4:\n\tprint(\"Howdy!\") \n\tx += 1\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:56:57.451Z","updated_at":"2019-09-30T16:58:39.439Z","kind":"exercise"},{"id":2290,"title":null,"prerequisites":null,"position":13,"instructions":"Write a `while` loop to output:\n```\nFive times!\nFive times!\nFive times!\nFive times!\nFive times!\n```\n\nHeads up: don't forget to initialize the variable `count` to zero before the `while` loop!","solution_code":"count = 0 \nwhile count < 5: \n\tprint(\"Five times!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Five times!Five times!Five times!Five times!Five times!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 5:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:01:08.409Z","updated_at":"2019-09-30T17:01:42.333Z","kind":"exercise"},{"id":2287,"title":null,"prerequisites":null,"position":10,"instructions":"Change the `wxyz` on line 3 to output the following:\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4:\n\twxyz \n\tcount += 1\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T16:59:04.152Z","updated_at":"2019-09-30T16:59:20.903Z","kind":"exercise"},{"id":2297,"title":null,"prerequisites":null,"position":20,"instructions":"Replace `wxyz` to output\n```\n0\n1\n2\n3\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(count) \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwxyz \n\tprint(count) \n    count += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0123'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:13:29.169Z","updated_at":"2019-09-30T17:13:46.918Z","kind":"exercise"},{"id":2299,"title":null,"prerequisites":null,"position":22,"instructions":"Write a `while` loop to output\n```\n0\n1\n2\n```\n","solution_code":"count = 0 \nwhile count < 3: \n\tprint(count) \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('012'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 3:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:14:39.379Z","updated_at":"2019-09-30T17:16:11.551Z","kind":"exercise"},{"id":2291,"title":null,"prerequisites":null,"position":14,"instructions":"Fix the bug on line 2. The code should output\n```\nFive times!\nFive times!\nFive times!\nFive times!\nFive times!\n```\n\nHint: it's missing a `:`.","solution_code":"count = 0 \nwhile count < 5: \n\tprint(\"Five times!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0\nwhile count < 5\n\tprint(\"Five times!\")\n\tcount += 1\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Five times!Five times!Five times!Five times!Five times!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 5:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:01:50.864Z","updated_at":"2019-09-30T17:38:20.335Z","kind":"exercise"},{"id":2307,"title":null,"prerequisites":null,"position":30,"instructions":"Write a `while` loop to output\n```\n0\n1\n2\n3\nDone!\n```\n","solution_code":"count = 0\nwhile count < 4:\n\tprint(count)\n\tcount += 1\nprint(\"Done!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0123Done!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count<4'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:26:59.808Z","updated_at":"2019-09-30T17:27:45.210Z","kind":"exercise"},{"id":2306,"title":null,"prerequisites":null,"position":29,"instructions":"Change line 5 to output\n```\n0\n1\n2\n3\nDone!\n```\n\nHint: change the indentation.","solution_code":"count = 0\nwhile count < 4:\n\tprint(count)\n\tcount += 1\nprint(\"Done!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0\nwhile count < 4:\n\tprint(count)\n\tcount += 1\n\tprint(\"Done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0123Done!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count<4'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:26:03.068Z","updated_at":"2019-09-30T17:26:34.692Z","kind":"exercise"},{"id":2294,"title":null,"prerequisites":null,"position":17,"instructions":"Fix the bug on line 4. The code should output\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \ncount += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:04:31.309Z","updated_at":"2019-09-30T17:04:39.041Z","kind":"exercise"},{"id":2295,"title":null,"prerequisites":null,"position":18,"instructions":"Fix the bug on line 4. The code should output\n```\nHowdy!\nHowdy!\nHowdy!\nHowdy!\n```\n\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 4: \n\tprint(\"Howdy!\") \n   count += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Howdy!Howdy!Howdy!Howdy!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:04:49.654Z","updated_at":"2019-09-30T17:04:54.078Z","kind":"exercise"},{"id":2296,"title":null,"prerequisites":null,"position":19,"instructions":"Change the code to output\n```\n0\n1\n2\n3\n```\n","solution_code":"count = 0 \nwhile count < 4: \n\tprint(count) \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwhile count < 3: \n\tprint(count) \n    count += 1 \n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0123'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 4:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:07:55.472Z","updated_at":"2019-09-30T17:13:16.766Z","kind":"exercise"},{"id":2303,"title":null,"prerequisites":null,"position":26,"instructions":"`while` loops don't have to start at 0. Change the number on line 1 to output\n```\n2\n3\n4\n```\n","solution_code":"count = 2\nwhile count < 5:\n\tprint(count)\n\tcount += 1","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 1\nwhile count < 5: \n\tprint(count) \n\tcount += 1\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('234'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count<5'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:21:28.426Z","updated_at":"2019-09-30T17:25:32.428Z","kind":"exercise"},{"id":2305,"title":null,"prerequisites":null,"position":28,"instructions":"Note that `Done!` is outside the loop. Change line 2 to output\n```\n0\n1\n2\n3\nDone!\n```\n","solution_code":"count = 0\nwhile count < 4:\n\tprint(count)\n\tcount += 1\nprint(\"Done!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0\nwhile count < 5:\n\tprint(count)\n\tcount += 1\nprint(\"Done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('0123Done!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('count<4'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:23:24.784Z","updated_at":"2019-09-30T17:25:22.634Z","kind":"exercise"},{"id":2292,"title":null,"prerequisites":null,"position":15,"instructions":"Fix the bug on line 2. The code should output\n```\nFive times!\nFive times!\nFive times!\nFive times!\nFive times!\n```\n\nHint: a word is misspelled.","solution_code":"count = 0 \nwhile count < 5: \n\tprint(\"Five times!\") \n\tcount += 1 ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncount = 0 \nwile count < 5:\n\tprint(\"Five times!\")\n\tcount += 1\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ''.join('Five times!Five times!Five times!Five times!Five times!'.split()), \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = ''.join('while count < 5:'.split())\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(soln) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":187,"phanon_module_id":null,"created_at":"2019-09-30T17:02:35.806Z","updated_at":"2019-09-30T17:38:26.548Z","kind":"exercise"}]},{"id":56,"title":"7b (6) - for loops II","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":11,"published":null,"created_at":"2019-08-29T21:19:00.192Z","updated_at":"2019-10-02T15:34:14.856Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":751,"title":null,"prerequisites":null,"position":0,"instructions":"Change the code to output\n\n```\nyo!\n0\nyo!\n1\nyo!\n2\nyo!\n3\n```\n\nHint: you will change only line 1.","solution_code":"for i in range(4):\n    print(\"yo!\")\n    print(i)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor i in range(3):\n    print(\"yo!\")\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == 'yo!0yo!1yo!2yo!3', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-08-29T21:23:10.136Z","updated_at":"2019-08-29T21:23:42.078Z","kind":"exercise"},{"id":747,"title":null,"prerequisites":null,"position":1,"instructions":"Change the code to output\n\n```\nHello\nWorld!\n0\nHello\nWorld!\n1\nHello\nWorld!\n2\n```\n\nHint: you will change only line 1.","solution_code":"for i in range(3):\n    print(\"Hello\")\n    print(\"World!\")\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n    print(\"Hello\")\n    print(\"World!\")\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == 'HelloWorld!0HelloWorld!1HelloWorld!2', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-08-29T21:19:01.477Z","updated_at":"2019-08-29T21:23:11.447Z","kind":"exercise"},{"id":749,"title":null,"prerequisites":null,"position":2,"instructions":"Add `i` to the first `print()` call to output\n\n```\n0\nHello\nWorld!\n1\nHello\nWorld!\n2\nHello\nWorld!\n```\n\n","solution_code":"for i in range(3):\n    print(i)\n    print(\"Hello\")\n    print(\"World!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n    print()\n    print(\"Hello\")\n    print(\"World!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0HelloWorld!1HelloWorld!2HelloWorld!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-08-29T21:19:01.715Z","updated_at":"2019-08-29T21:23:10.127Z","kind":"exercise"},{"id":750,"title":null,"prerequisites":null,"position":3,"instructions":"Add two `print()` statements to output\n\n```\n0\nyo!\n1\nyo!\n2\nyo!\n```\n\nHeads up: be sure to indent both `print()` statements!\n\nHint: the first print statement will print `i` and the second one will print `yo!`.","solution_code":"for i in range(3):\n    print(i)\n    print(\"yo!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0yo!1yo!2yo!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-08-29T21:19:01.769Z","updated_at":"2019-09-06T20:15:39.629Z","kind":"exercise"},{"id":1060,"title":null,"prerequisites":null,"position":6,"instructions":"Add two `print()` statements to output\n\n```\n0\nyo!\n1\nyo!\n2\nyo!\n```\n","solution_code":"for i in range(3):\n    print(i)\n    print(\"yo!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0yo!1yo!2yo!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T20:48:00.602Z","updated_at":"2019-09-06T20:48:48.468Z","kind":"exercise"},{"id":1061,"title":null,"prerequisites":null,"position":7,"instructions":"The following code prints `done!` after the numbers. This is because the last `print` statement is \"outside\" the `for` loop. Change line 1 so that the following is output:\n\n```\n0\n1\n2\n3\ndone!\n```\n","solution_code":"for i in range(4):\n    print(i)\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n    print(i)\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T20:48:42.939Z","updated_at":"2019-09-06T21:08:05.835Z","kind":"exercise"},{"id":1063,"title":null,"prerequisites":null,"position":9,"instructions":"Add a `print()` statement to output the following:\n\n```\n0\n1\n2\n3\ndone!\n```\n\nHeads up: be sure that the second `print` (the one that you add) is *not* indented!","solution_code":"for i in range(4):\n    print(i)\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:04:39.629Z","updated_at":"2019-09-06T21:07:57.985Z","kind":"exercise"},{"id":1058,"title":null,"prerequisites":null,"position":4,"instructions":"Add two `print()` statements to output\n\n```\nyo!\n0\nyo!\n1\nyo!\n2\n```\n\nHeads up: be sure to indent both `print()` statements!\n\nHint: the first print statement will print `yo!` and the second one will print `i`.","solution_code":"for i in range(3):\n    print(\"yo!\")\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == 'yo!0yo!1yo!2', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T20:15:31.233Z","updated_at":"2019-09-06T20:47:41.992Z","kind":"exercise"},{"id":1059,"title":null,"prerequisites":null,"position":5,"instructions":"Add two `print()` statements to output\n\n```\nyo!\n0\nyo!\n1\nyo!\n2\n```\n","solution_code":"for i in range(3):\n    print(\"yo!\")\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == 'yo!0yo!1yo!2', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T20:47:36.168Z","updated_at":"2019-09-06T20:48:05.746Z","kind":"exercise"},{"id":1064,"title":null,"prerequisites":null,"position":10,"instructions":"Add a `print()` statement to line 2 output the following:\n\n```\n0\n1\n2\n3\ndone!\n```\n\nHeads up: be sure that the `print` statement that you add *is* indented!","solution_code":"for i in range(4):\n    print(i)\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:05:33.137Z","updated_at":"2019-09-06T21:07:52.084Z","kind":"exercise"},{"id":1062,"title":null,"prerequisites":null,"position":8,"instructions":"Add a string to the second `print()` statement to output the following:\n\n```\n0\n1\n2\n3\ndone!\n```\n","solution_code":"for i in range(4):\n    print(i)\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n    print(i)\nprint()\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:03:42.731Z","updated_at":"2019-09-06T21:08:01.726Z","kind":"exercise"},{"id":1065,"title":null,"prerequisites":null,"position":11,"instructions":"Add a `print()` statement to line 3 output the following:\n\n```\n0\nyo!\n1\nyo!\n2\nyo!\n3\nyo!\ndone!\n```\n\nHeads up: be sure that the `print` statement that you add *is* indented!","solution_code":"for i in range(4):\n    print(i)\n    print(\"yo!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\tprint(i)\n    \nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0yo!1yo!2yo!3yo!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:06:32.751Z","updated_at":"2019-09-06T21:08:39.258Z","kind":"exercise"},{"id":1066,"title":null,"prerequisites":null,"position":12,"instructions":"Fix the bug so the following is output.\n\n```\n0\nyo!\n1\nyo!\n2\nyo!\n3\nyo!\ndone!\n```\n","solution_code":"for i in range(4):\n    print(i)\n    print(\"yo!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\tprint(i)\n    print(\"yo!\")\n\tprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0yo!1yo!2yo!3yo!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:08:43.307Z","updated_at":"2019-09-06T21:09:12.344Z","kind":"exercise"},{"id":1068,"title":null,"prerequisites":null,"position":14,"instructions":"Use a `for` loop to output the following:\n\n```\n0\nhey!\n1\nhey!\n2\nhey!\n3\nhey!\ndone!\n```\n","solution_code":"for i in range(4):\n    print(i)\n    print(\"hey!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\n    \nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0hey!1hey!2hey!3hey!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:10:28.337Z","updated_at":"2019-09-06T21:37:57.409Z","kind":"exercise"},{"id":1067,"title":null,"prerequisites":null,"position":13,"instructions":"Fix the bug so the following is output.\n\n```\n0\nyo!\n1\nyo!\n2\nyo!\n3\nyo!\ndone!\n```\n","solution_code":"for i in range(4):\n    print(i)\n    print(\"yo!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\tprint(i)\nprint(\"yo!\")\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0yo!1yo!2yo!3yo!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:09:49.806Z","updated_at":"2019-09-06T21:10:08.670Z","kind":"exercise"},{"id":1071,"title":null,"prerequisites":null,"position":15,"instructions":"Use a `for` loop to output the following:\n\n```\n0\n1\n2\n3\nCS!\ndone!\n```\n\nHint: the `print()` statement for `CS!` will be \"outside\" the `for` loop. That is, don't indent that particular `print()` statement.","solution_code":"for i in range(4):\n    print(i)\nprint(\"CS!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123CS!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:38:05.529Z","updated_at":"2019-09-06T21:41:18.782Z","kind":"exercise"},{"id":1073,"title":null,"prerequisites":null,"position":17,"instructions":"Fix the bug so the following is output:\n\n```\n0\nCS!\n1\nCS!\n2\nCS!\n3\nCS!\ndone!\n```\n\nHint: the `print()` statement for `CS!` will be \"outside\" the `for` loop. That is, don't indent that particular `print()` statement.","solution_code":"for i in range(4):\n    print(i)\n\tprint(\"CS!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\nprint(i)\nprint(\"CS!\")\nprint(\"done!\")\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0CS!1CS!2CS!3CS!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:44:07.433Z","updated_at":"2019-09-06T21:45:12.287Z","kind":"exercise"},{"id":1072,"title":null,"prerequisites":null,"position":16,"instructions":"Fix the bug so the following is output:\n\n```\n0\n1\n2\n3\nCS!\ndone!\n```\n\nHint: the `print()` statement for `CS!` will be \"outside\" the `for` loop. That is, don't indent that particular `print()` statement.","solution_code":"for i in range(4):\n    print(i)\nprint(\"CS!\")\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\nprint(i)\nprint(\"CS!\")\nprint(\"done!\")\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123CS!done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":56,"phanon_module_id":null,"created_at":"2019-09-06T21:41:13.062Z","updated_at":"2019-09-06T21:44:13.727Z","kind":"exercise"}]},{"id":19,"title":"1a - variables I","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":1,"published":null,"created_at":"2019-08-16T18:48:21.128Z","updated_at":"2019-09-09T15:40:57.459Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":203,"title":null,"prerequisites":null,"position":2,"instructions":"`a` is called a variable. Change the value of `a` from 3 to 4.\n\n*Hint: change the 3 to a 4.*","solution_code":"a = 4\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(a, 4, 'a')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:27:18.937Z","updated_at":"2019-08-16T21:29:38.578Z","kind":"exercise"},{"id":205,"title":null,"prerequisites":null,"position":4,"instructions":"Assign the value 11 to the variable `b`.","solution_code":"b = 11\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nb = 88\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(b, 11, 'b')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:29:37.854Z","updated_at":"2019-08-16T20:44:02.348Z","kind":"exercise"},{"id":214,"title":null,"prerequisites":null,"position":11,"instructions":"Change the value of the variable `b` so that 8 is printed out. Do not change the value of `a`.\n\n*Hint: run the code with different values for `b` to get a feel for what is happening if needed.*\n\n*Heads up: do not change the `print` statement.*","solution_code":"a = 3\nb = 5\nprint(a+b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(a+b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '8\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 5)\nphanon_h_test_greater_than(code.find('print(a+b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:00:26.351Z","updated_at":"2019-08-16T23:19:36.806Z","kind":"exercise"},{"id":221,"title":null,"prerequisites":null,"position":18,"instructions":"`c` is assigned the sum of `a` and `b`. Add a `print` statement to print the value of `c`.\n\n","solution_code":"a = 3\nb = 4\nc = a + b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nc = a + b\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '7\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 7)\nphanon_h_test_greater_than(code.find('c=a+b'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:27:09.984Z","updated_at":"2019-08-16T23:23:50.011Z","kind":"exercise"},{"id":222,"title":null,"prerequisites":null,"position":19,"instructions":"Sum the variables `a` and `b` and assign the result to variable `c`. Your output should be '7'.\n\n*Heads up: be sure to assign `c` before the `print` statement.*","solution_code":"a = 3\nb = 4\nc = a + b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '7\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 7)\nphanon_h_test_greater_than(code.find('c=a+b'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:34:44.376Z","updated_at":"2019-08-16T23:24:13.346Z","kind":"exercise"},{"id":204,"title":null,"prerequisites":null,"position":3,"instructions":"The `=` sign indicates a *variable assignment*. Assign the variable `b` a value of 99 instead of 88.","solution_code":"b = 99\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nb = 88\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(b, 99, 'b')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:27:54.031Z","updated_at":"2019-08-16T20:43:33.718Z","kind":"exercise"},{"id":202,"title":null,"prerequisites":null,"position":1,"instructions":"Change the 3 to a 5. Notice that it now prints a 5.","solution_code":"a = 5\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(a, 5, 'a')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:26:04.685Z","updated_at":"2019-08-16T20:27:04.935Z","kind":"exercise"},{"id":206,"title":null,"prerequisites":null,"position":5,"instructions":"Add code to the `print()` call to print the value of variable `b`. Do not put `88` in the `print()` call -- put `b` in the `print()` call.\n\n*Heads up: Do not change the value of `b`.*","solution_code":"b = 88\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nb = 88\nprint()\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(b, 88, 'b')\nphanon_test(output == '88\\n', 'Correctly printed the value of b', 'You need to print the value of b')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_greater_than(code.find('(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:30:07.949Z","updated_at":"2019-08-16T21:29:50.238Z","kind":"exercise"},{"id":210,"title":null,"prerequisites":null,"position":7,"instructions":"Create a variable called `b` and assign its value to be 88.\n\n*Heads up: be sure to create the variable on a line above the print statement. You'll have to create a new line.*","solution_code":"b = 88\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(b, 88, 'b')\nphanon_test(output == '88\\n', 'Correctly printed the value of b', 'You need to print the value of b')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_greater_than(code.find('(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:41:17.516Z","updated_at":"2019-08-16T21:30:00.296Z","kind":"exercise"},{"id":211,"title":null,"prerequisites":null,"position":8,"instructions":"Create a variable called `c` and assign its value to be 5.","solution_code":"c = 5\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(c, 5, 'c')\nphanon_test(output == '5\\n', 'Correctly printed the value of c', 'You need to print the value of c')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_greater_than(code.find('(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:44:52.817Z","updated_at":"2019-08-16T20:45:57.443Z","kind":"exercise"},{"id":212,"title":null,"prerequisites":null,"position":9,"instructions":"Fix the following code so that it prints the value of the variable `d`.\n\n*Hint: Move the assignment of `d` to a line before `print`.*","solution_code":"d = 5\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(d)\nd = 5\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(d, 5, 'd')\nphanon_test(output == '5\\n', 'Correctly printed the value of d', 'You need to print the value of d')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_greater_than(code.find('(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:45:59.600Z","updated_at":"2019-08-16T21:30:12.171Z","kind":"exercise"},{"id":207,"title":null,"prerequisites":null,"position":6,"instructions":"Add code to print the value of `b`.","solution_code":"b = 88\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nb = 88\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(b, 88, 'b')\nphanon_test(output == '88\\n', 'Correctly printed the value of b', 'You need to print the value of b')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_greater_than(code.find('(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:38:56.505Z","updated_at":"2019-08-16T20:40:50.845Z","kind":"exercise"},{"id":218,"title":null,"prerequisites":null,"position":15,"instructions":"Print the text `a+b`.\n\n*Hint: see the previous exercise.*","solution_code":"a = 3\nb = 4\nprint(\"a+b\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == 'a+b\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\n#phanon_h_test_greater_than(code.find('print(a+b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:09:54.066Z","updated_at":"2019-09-03T21:50:21.013Z","kind":"exercise"},{"id":215,"title":null,"prerequisites":null,"position":12,"instructions":"Change the value of the variable `a` so that 6 is printed out. Do not change the value of `b`.","solution_code":"a = 2\nb = 4\nprint(a+b) ","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(a+b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '6\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 2)\nphanon_h_test_equals(b, 4)\nphanon_h_test_greater_than(code.find('print(a+b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:03:50.735Z","updated_at":"2019-08-16T23:19:41.907Z","kind":"exercise"},{"id":217,"title":null,"prerequisites":null,"position":14,"instructions":"Change the code so that the text `a+b` is printed instead of '7'.\n\n*Hint: you will need to add quotes around 'a+b' inside the `print()` call.*","solution_code":"a = 3\nb = 4\nprint(\"a+b\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(a+b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == 'a+b\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\n#phanon_h_test_greater_than(code.find('print(a+b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:09:04.538Z","updated_at":"2019-09-03T21:50:00.742Z","kind":"exercise"},{"id":201,"title":null,"prerequisites":null,"position":0,"instructions":"Run the code. Change the 3 to a 4. Notice that it now prints a 4.","solution_code":"a = 4\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(a, 4, 'a')\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T18:48:26.876Z","updated_at":"2019-09-06T19:53:27.561Z","kind":"exercise"},{"id":220,"title":null,"prerequisites":null,"position":17,"instructions":"Modify the code so that `7` is printed. Do not change the values of `a` or `b`.\n\n*Hint: You'll need to change some quote characters.*","solution_code":"a = 3\nb = 4\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(a + \"b\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '7\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\n#phanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:12:02.924Z","updated_at":"2019-09-03T21:50:44.591Z","kind":"exercise"},{"id":216,"title":null,"prerequisites":null,"position":13,"instructions":"Change the code so that '7' is printed instead of the text `a+b`.\n\n*Hint: you will need to remove quotes inside the `print()` call.*","solution_code":"a = 3\nb = 4\nprint(a+b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(\"a+b\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '7\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\n#phanon_h_test_greater_than(code.find('print(a+b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:07:43.067Z","updated_at":"2019-09-03T21:49:52.300Z","kind":"exercise"},{"id":213,"title":null,"prerequisites":null,"position":10,"instructions":"Fix the following code so that it prints the value of the variable `d` after printing `Hello world!`.\n\n*Heads up: don't remove the Hello world print statement.*\n\n*Hint: Move the assignment of `d` up one line.*","solution_code":"print(\"Hello world!\")\nd = 5\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Hello world!\")\nprint(d)\nd = 5\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(d, 5, 'd')\nphanon_test(output == 'Hello world!\\n5\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T20:57:13.159Z","updated_at":"2019-09-03T21:48:24.179Z","kind":"exercise"},{"id":219,"title":null,"prerequisites":null,"position":16,"instructions":"Print `7`. You should do so by adding the variables `a` and `b` inside the `print` statement.","solution_code":"a = 3\nb = 4\nprint(a+b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '7\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\nphanon_h_test_greater_than(code.find('print(a+b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":19,"phanon_module_id":null,"created_at":"2019-08-16T21:10:35.346Z","updated_at":"2019-09-03T21:50:31.116Z","kind":"exercise"}]},{"id":52,"title":"6 (1) - range","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":9,"published":null,"created_at":"2019-08-29T18:16:49.389Z","updated_at":"2019-09-11T02:47:59.033Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":654,"title":null,"prerequisites":null,"position":0,"instructions":"The `range(i, j)` function returns all numbers between `i` and `j-1`. Change the code so that it outputs the following:\n\n```\n[1, 2, 3, 4]\n```\n\nHint: change the 4 to a 5.","solution_code":"print(range(1, 5))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 4))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,5)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,2,3,4]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:17:01.579Z","updated_at":"2019-09-03T22:04:45.964Z","kind":"exercise"},{"id":658,"title":null,"prerequisites":null,"position":4,"instructions":"Change the code so that it outputs the following:\n\n```\n[2, 3]\n```\n\nHint: change the `1` to a `2`.","solution_code":"print(range(2, 4))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 4))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(2,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[2,3]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:26:57.680Z","updated_at":"2019-09-03T22:05:14.111Z","kind":"exercise"},{"id":664,"title":null,"prerequisites":null,"position":10,"instructions":"Change the code so that it outputs from `-18` to `173`, inclusive. So the output will be:\n\n```\n[-18, -17, -16,..., 171, 172, 173]\n```\n","solution_code":"print(range(-18, 174))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 9))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(-18,174)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T19:21:52.209Z","updated_at":"2019-09-03T22:07:51.593Z","kind":"exercise"},{"id":666,"title":null,"prerequisites":null,"position":12,"instructions":"Run the code. The extra `2` in the call to `range()` means that we're going to output only every second number. Change the code to output:\n\n```\n[1, 3, 5, 7]\n```\n","solution_code":"print(range(1, 8, 2))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 6, 2))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,8,2)') > -1 or code.find('range(1,9,2)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,3,5,7]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:27:27.911Z","updated_at":"2019-09-03T22:08:16.713Z","kind":"exercise"},{"id":668,"title":null,"prerequisites":null,"position":14,"instructions":"Change the code to output:\n\n```\n[1, 3, 5]\n```\n","solution_code":"print(range(1, 6, 2))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(2, 10, 2))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,6,2)') > -1 or code.find('range(1,7,2)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,3,5]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:32:24.727Z","updated_at":"2019-09-03T22:08:33.583Z","kind":"exercise"},{"id":669,"title":null,"prerequisites":null,"position":15,"instructions":"Change the code to output:\n\n```\n[1, 4, 7, 10]\n```\n\nNote: the `3` in the argument list for `range()` means that it will output every third number.","solution_code":"print(range(1, 11, 3))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(2, 10, 3))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,11,3)') > -1 or code.find('range(1,12,3)') > -1 or code.find('range(1,13,3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,4,7,10]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:36:59.545Z","updated_at":"2019-09-03T22:08:38.553Z","kind":"exercise"},{"id":672,"title":null,"prerequisites":null,"position":18,"instructions":"Change the code to output\n\n```\n0, 1, 2, 3, 4, 5]\n```","solution_code":"print(range(6))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(5))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(6)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,1,2,3,4,5]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:44:43.656Z","updated_at":"2019-09-03T22:09:09.335Z","kind":"exercise"},{"id":655,"title":null,"prerequisites":null,"position":1,"instructions":"Change the code so that it outputs the following:\n\n```\n[1, 2]\n```\n\n","solution_code":"print(range(1, 3))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 4))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,2]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:21:48.705Z","updated_at":"2019-09-03T22:04:52.776Z","kind":"exercise"},{"id":673,"title":null,"prerequisites":null,"position":19,"instructions":"Variable `numbers` stores the output from the `range()` call. Change the code to output\n\n```\n[0, 1, 2, 3, 4, 5]\n```\n\nHint: you'll change the 5. You will not change the `print()` function.","solution_code":"numbers = range(6)\nprint(numbers)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nnumbers = range(5)\nprint(numbers)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(6)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(numbers)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,1,2,3,4,5]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:45:25.907Z","updated_at":"2019-09-03T22:09:43.130Z","kind":"exercise"},{"id":657,"title":null,"prerequisites":null,"position":3,"instructions":"Change the code so that it outputs the following:\n\n```\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n```\n\n","solution_code":"print(range(1, 19))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 4))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,19)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:25:43.786Z","updated_at":"2019-09-03T22:05:03.810Z","kind":"exercise"},{"id":656,"title":null,"prerequisites":null,"position":2,"instructions":"Change the code so that it outputs the following:\n\n```\n[1, 2, 3, 4, 5]\n```\n\n","solution_code":"print(range(1, 6))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 4))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,6)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,2,3,4,5]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:23:10.195Z","updated_at":"2019-09-03T22:04:58.496Z","kind":"exercise"},{"id":675,"title":null,"prerequisites":null,"position":21,"instructions":"Change the code to output\n\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nusing a call to `range()`.\n\nHint: you will replace `3` with a call to `range()`.","solution_code":"numbers = range(9)\nprint(numbers)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nnumbers = 3\nprint(numbers)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(9)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(numbers)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,1,2,3,4,5,6,7,8]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:48:14.912Z","updated_at":"2019-09-03T22:10:01.170Z","kind":"exercise"},{"id":660,"title":null,"prerequisites":null,"position":7,"instructions":"Change the code so that it outputs the following:\n\n```\n[218, 219, 220, 221, 222]\n```\n\n","solution_code":"print(range(218, 223))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 9))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(218,223)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[218,219,220,221,222]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:30:17.449Z","updated_at":"2019-09-03T22:06:52.078Z","kind":"exercise"},{"id":659,"title":null,"prerequisites":null,"position":5,"instructions":"Change the code so that it outputs the following:\n\n```\n[2, 3, 4, 5, 6, 7]\n```\n","solution_code":"print(range(2, 8))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 8))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(2,8)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[2,3,4,5,6,7]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:28:16.401Z","updated_at":"2019-09-03T22:05:20.109Z","kind":"exercise"},{"id":661,"title":null,"prerequisites":null,"position":6,"instructions":"Change the code so that it outputs the following:\n\n```\n[4, 5, 6, 7]\n```\n\nHint: you will need to change both arguments to the `range()` function.","solution_code":"print(range(4, 8))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 9))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4,8)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[4,5,6,7]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T18:31:26.984Z","updated_at":"2019-09-03T22:06:39.892Z","kind":"exercise"},{"id":676,"title":null,"prerequisites":null,"position":22,"instructions":"Add code to line 1 to assign a value to variable `numbers` such that the code outputs the following:\n\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nYou must use a call to `range()`.\n\nHint: see previous exercise if you get stuck.","solution_code":"numbers = range(9)\nprint(numbers)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\nprint(numbers)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(9)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(numbers)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,1,2,3,4,5,6,7,8]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:49:49.886Z","updated_at":"2019-09-03T22:10:06.529Z","kind":"exercise"},{"id":662,"title":null,"prerequisites":null,"position":8,"instructions":"Change the code so that it outputs the following:\n\n```\n[-3, -2, -1, 0, 1, 2]\n```\n\nHint: the first argument to the `range()` function will be negative.","solution_code":"print(range(-3, 3))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 9))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(-3,3)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[-3,-2,-1,0,1,2]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T19:18:02.021Z","updated_at":"2019-09-03T22:06:59.792Z","kind":"exercise"},{"id":663,"title":null,"prerequisites":null,"position":9,"instructions":"Change the code so that it outputs the following:\n\n```\n[-5, -4, -3, -2]\n```\n\nHint: both arguments to the `range()` function will be negative.","solution_code":"print(range(-5, -1))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 9))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(-5,-1)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[-5,-4,-3,-2]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T19:19:48.254Z","updated_at":"2019-09-03T22:07:33.609Z","kind":"exercise"},{"id":674,"title":null,"prerequisites":null,"position":20,"instructions":"Change the code to output\n\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nChange only line 1.","solution_code":"numbers = range(9)\nprint(numbers)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nnumbers = range(5)\nprint(numbers)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(9)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(numbers)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,1,2,3,4,5,6,7,8]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:47:28.009Z","updated_at":"2019-09-03T22:09:53.567Z","kind":"exercise"},{"id":665,"title":null,"prerequisites":null,"position":11,"instructions":"Run the code. The extra `2` in the call to `range()` means that we're going to output only every second number. Change the code to output:\n\n```\n[1, 3, 5, 7]\n```\n","solution_code":"print(range(1, 8, 2))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(1, 6, 2))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,8,2)') > -1 or code.find('range(1,9,2)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[1,3,5,7]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T19:25:31.568Z","updated_at":"2019-09-03T22:08:09.749Z","kind":"exercise"},{"id":667,"title":null,"prerequisites":null,"position":13,"instructions":"Change the code to output:\n\n```\n[2, 4, 6, 8, 10]\n```\n","solution_code":"print(range(2, 11, 2))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(2, 10, 2))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(2,11,2)') > -1 or code.find('range(2,12,2)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[2,4,6,8,10]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:27:41.196Z","updated_at":"2019-09-03T22:08:27.710Z","kind":"exercise"},{"id":670,"title":null,"prerequisites":null,"position":16,"instructions":"Change the code to output:\n\n```\n[0, 10, 20, 30, 40]\n```\n\nHint: you'll change the 3 to something else. Do not change any other number.","solution_code":"print(range(0, 41, 10))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(0, 41, 3))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(0,41,10)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,10,20,30,40]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:39:09.542Z","updated_at":"2019-09-03T22:08:54.714Z","kind":"exercise"},{"id":671,"title":null,"prerequisites":null,"position":17,"instructions":"We can pass just one number to `range()` if we want. It will return numbers starting from `0` to the number you give it minus one. Change the code to output\n\n```\n[0, 1, 2, 3]\n```","solution_code":"print(range(4))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(range(5))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '[0,1,2,3]', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":52,"phanon_module_id":null,"created_at":"2019-08-29T20:41:09.941Z","updated_at":"2019-09-03T22:09:01.008Z","kind":"exercise"}]},{"id":51,"title":"5 - turtle","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":8,"published":null,"created_at":"2019-08-29T18:08:23.084Z","updated_at":"2019-09-11T02:47:59.910Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":653,"title":null,"prerequisites":null,"position":0,"instructions":"Run the following code. Change the color of the line to be blue.","solution_code":"import turtle\nt = turtle.Turtle()\nt.color(\"blue\")\nt.forward(100)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nimport turtle\nt = turtle.Turtle()\nt.color(\"red\")\nt.forward(100)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find(\"blue\") > -1, \"Success\", \"Missing blue\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":51,"phanon_module_id":null,"created_at":"2019-08-29T18:08:27.234Z","updated_at":"2019-09-03T21:18:43.973Z","kind":"exercise"},{"id":816,"title":null,"prerequisites":null,"position":1,"instructions":"Run the following code. Double the length of the line. You'll need to change the value `100` to something else.","solution_code":"import turtle\nt = turtle.Turtle()\nt.color('red')\nt.forward(200)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nimport turtle\nt = turtle.Turtle()\nt.color('red')\nt.forward(100)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find(\"200\") > -1, \"Success\", \"Line length not correct\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":51,"phanon_module_id":null,"created_at":"2019-09-03T21:20:30.595Z","updated_at":"2019-09-03T21:22:22.043Z","kind":"exercise"},{"id":817,"title":null,"prerequisites":null,"position":2,"instructions":"Run the following code. Change the code so the turtle turns left 90 degrees.","solution_code":"import turtle\nt = turtle.Turtle()\nt.color('red')\nt.forward(100)\nt.left(90)\nt.forward(100)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nimport turtle\nt = turtle.Turtle()\nt.color('red')\nt.forward(100)\nt.right(90)\nt.forward(100)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find(\"left\") > -1, \"Success\", \"Failure\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":51,"phanon_module_id":null,"created_at":"2019-09-03T21:22:22.388Z","updated_at":"2019-09-03T21:23:15.856Z","kind":"exercise"},{"id":818,"title":null,"prerequisites":null,"position":3,"instructions":"Run the following code. Add code so the turtle draws a square. You'll need to add turns and forward calls.","solution_code":"import turtle\nt = turtle.Turtle()\nt.speed(8)\nt.color('red')\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)","solution_tests_passing":true,"test_code":"import re\n\n### BEGIN_STUDENT\nimport turtle\nt = turtle.Turtle()\nt.speed(8)\nt.color('red')\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\nleft = [m for m in re.findall('left', code)]\nforward = [m for m in re.findall('forward', code)]\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(len(left) >= 3, \"Success\", \"Not enough calls to the left() function\")\nphanon_test(len(forward) >= 4, \"Success\", \"Not enough calls to the forward() function\")\nprint(forward)\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":51,"phanon_module_id":null,"created_at":"2019-09-03T21:23:19.940Z","updated_at":"2019-09-03T21:39:48.426Z","kind":"exercise"},{"id":819,"title":null,"prerequisites":null,"position":4,"instructions":"Run the following code. `t.penup()` means that now moving the turtle doesn't draw anything until we make a `pendown()` call. Add code so the turtle draws one more line segment.","solution_code":"import turtle\nt = turtle.Turtle()\nt.speed(8)\nt.color('red')\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)\nt.forward(100)\nt.left(90)","solution_tests_passing":true,"test_code":"import re\n\n### BEGIN_STUDENT\nimport turtle\n\nt = turtle.Turtle()\nt.color('red')\n\nt.forward(20)\n\nt.penup()\nt.forward(5)\nt.pendown()\n\nt.forward(20)\n\nt.penup()\nt.forward(5)\nt.pendown()\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\nleft = [m for m in re.findall('left', code)]\nforward = [m for m in re.findall('forward', code)]\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(len(forward) >= 3, \"Success\", \"Not enough calls to the forward() function\")\nprint(forward)\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":51,"phanon_module_id":null,"created_at":"2019-09-03T21:43:59.613Z","updated_at":"2019-09-03T21:46:28.357Z","kind":"exercise"}]},{"id":49,"title":"3 (1) - strings and string concatenation","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":6,"published":null,"created_at":"2019-08-29T13:41:42.857Z","updated_at":"2019-09-11T02:48:04.178Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":621,"title":null,"prerequisites":null,"position":0,"instructions":"Fill in the quotes so that your program prints the following:\n\n```\nHello world!\n```","solution_code":"print(\"Hello world!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Hello world!\\n\", \"Success output\", \"Failure output\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:42:18.623Z","updated_at":"2019-09-03T21:54:53.209Z","kind":"exercise"},{"id":624,"title":null,"prerequisites":null,"position":3,"instructions":"Fill in the second string so that the following is output:\n\n```\nHello world!\n```\n","solution_code":"print(\"Hello \" + \"world!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello \" + \"\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Hello world!\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"Hello\"+\"world!\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:48:26.458Z","updated_at":"2019-09-03T21:55:27.399Z","kind":"exercise"},{"id":626,"title":null,"prerequisites":null,"position":5,"instructions":"Fill in the first string so that the following is output:\n\n```\nHello world!\n```\n\n*Note:* You will need to add the space to the first string.","solution_code":"print(\"Hello \" + \"world!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"\" + \"world!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Hello world!\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"Hello\"+\"world!\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:51:20.142Z","updated_at":"2019-09-03T21:55:38.788Z","kind":"exercise"},{"id":630,"title":null,"prerequisites":null,"position":10,"instructions":"This code concatenates a string at the end that is stored in the variable `name`. All the other strings in the `print` statement are called *string literals*. Change the value of `name` to the code outputs the following:\n\n```\nThe trouble with George\n```\n\nYou will change only the first line of code.","solution_code":"name = \"George\"\nprint(\"The \" + \"trouble \" + \"with \" + name)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nname = \"Harry\"\nprint(\"The \" + \"trouble \" + \"with \" + name)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble with George\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+\"trouble\"+\"with\"+name') > -1, \"Correct code\", \"Incorrect code\")\nphanon_test_equals(name, \"George\", \"name\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:18:09.134Z","updated_at":"2019-09-03T21:56:17.812Z","kind":"exercise"},{"id":632,"title":null,"prerequisites":null,"position":11,"instructions":"Concatenate the variable `name` to the end in the `print` statement to get the following output:\n\n```\nThe trouble with Harry\n```\n\nYou will change only the second line of code.","solution_code":"name = \"Harry\"\nprint(\"The \" + \"trouble \" + \"with \" + name)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nname = \"Harry\"\nprint(\"The \" + \"trouble \" + \"with \")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble with Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+\"trouble\"+\"with\"+name') > -1, \"Correct code\", \"Incorrect code\")\nphanon_test_equals(name, \"Harry\", \"name\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:24:26.127Z","updated_at":"2019-09-03T21:56:22.416Z","kind":"exercise"},{"id":631,"title":null,"prerequisites":null,"position":9,"instructions":"Insert a new string so that the following is output:\n\n```\nThe trouble is with Harry\n```\n\nYour new string will be concatenated with the others.\n\nHint: you will add a new string between \"trouble \" and \"with \". Don't forget the `+` sign!","solution_code":"print(\"The \" + \"trouble \" + \"is \" + \"with \" + \"Harry\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"The \" + \"trouble \" + \"with \" + \"Harry\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble is with Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+\"trouble\"+\"is\"+\"with\"+\"Harry\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:18:44.506Z","updated_at":"2019-09-03T21:56:12.806Z","kind":"exercise"},{"id":629,"title":null,"prerequisites":null,"position":8,"instructions":"Change the ***second*** string so that the following is output:\n\n```\nThe trouble is with Harry\n```\n\nHint: the third string will remain \"with \". The *second* string will change.","solution_code":"print(\"The \" + \"trouble is \" + \"with \" + \"Harry\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"The \" + \"trouble \" + \"with \" + \"Harry\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble is with Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+\"troubleis\"+\"with\"+\"Harry\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:13:23.911Z","updated_at":"2019-09-03T21:56:03.242Z","kind":"exercise"},{"id":633,"title":null,"prerequisites":null,"position":12,"instructions":"Insert the variable `noun` into the correct position in the `print` statement so that the following is output:\n\n```\nThe trouble with Harry\n```\n\nDo *not* insert \"trouble \" into the `print` statement. Use the `noun` variable.","solution_code":"name = \"Harry\"\nnoun = \"trouble \"\nprint(\"The \" + noun + \"with \" + name)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nname = \"Harry\"\nnoun = \"trouble \"\nprint(\"The \" + \"with \" + name)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble with Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+noun+\"with\"+name') > -1, \"Correct code\", \"Incorrect code\")\n#phanon_test_equals(name, \"Harry\", \"name\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:26:18.130Z","updated_at":"2019-09-03T21:56:27.117Z","kind":"exercise"},{"id":623,"title":null,"prerequisites":null,"position":2,"instructions":"We can add two strings together. This is called string concatenation. Change the second string so that the following is output:\n\n```\nHello alien!\n```\n\nHint: change `world!` to `alien!`.","solution_code":"print(\"Hello \" + \"alien!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello \" + \"world!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Hello alien!\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"Hello\"+\"alien!\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:45:57.218Z","updated_at":"2019-09-03T21:55:18.675Z","kind":"exercise"},{"id":625,"title":null,"prerequisites":null,"position":4,"instructions":"Fill in the first string so that the following is output:\n\n```\nHello world!\n```\n\n*Note:* the space that needs to go between `Hello` and `world!` is now in the second string. You do not need to add a space to the first string.","solution_code":"print(\"Hello\" + \" world!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"\" + \" world!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Hello world!\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"Hello\"+\"world!\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:49:51.370Z","updated_at":"2019-09-03T21:55:32.820Z","kind":"exercise"},{"id":628,"title":null,"prerequisites":null,"position":7,"instructions":"Change the third string so that the following is output:\n\n```\nThe trouble is with Harry\n```\n\nHint: the third string will be \"is with \".","solution_code":"print(\"The \" + \"trouble \" + \"is with \" + \"Harry\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"The \" + \"trouble \" + \"with \" + \"Harry\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble is with Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+\"trouble\"+\"iswith\"+\"Harry\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:11:36.697Z","updated_at":"2019-09-03T21:55:58.104Z","kind":"exercise"},{"id":622,"title":null,"prerequisites":null,"position":1,"instructions":"Everything in the quotes is called a string. Change the string in this program from `Hello world!` to `Hello alien!`. Your program should print the following:\n\n```\nHello alien!\n```","solution_code":"print(\"Hello alien!\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"Hello world!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Hello alien!\\n\", \"Success output\", \"Failure output\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:43:56.851Z","updated_at":"2019-09-03T21:55:09.598Z","kind":"exercise"},{"id":627,"title":null,"prerequisites":null,"position":6,"instructions":"Change the third string so that the following is output:\n\n```\nThe trouble is Harry\n```","solution_code":"print(\"The \" + \"trouble \" + \"is \" + \"Harry\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"The \" + \"trouble \" + \"with \" + \"Harry\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble is Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+\"trouble\"+\"is\"+\"Harry\"') > -1, \"Correct code\", \"Incorrect code\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T13:52:01.358Z","updated_at":"2019-09-03T21:55:51.503Z","kind":"exercise"},{"id":634,"title":null,"prerequisites":null,"position":13,"instructions":"Write a `print` statement so the following is output:\n\n```\nThe trouble with Harry\n```\n\nYou should add only one line of code. You must use the variables `name` and `noun`. Your answer should concatenate four strings together -- two of them from the variables and two of them string literals (reminder: a string literal is where a string is defined with quotation marks).\n","solution_code":"name = \"Harry\"\nnoun = \"trouble \"\nprint(\"The \" + noun + \"with \" + name)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nname = \"Harry\"\nnoun = \"trouble \"\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"The trouble with Harry\\n\", \"Correct output\", \"Incorrect output\")\nphanon_test(code.find('\"The\"+noun+\"with\"+name') > -1, \"Correct code\", \"Incorrect code\")\n#phanon_test_equals(name, \"Harry\", \"name\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":49,"phanon_module_id":null,"created_at":"2019-08-29T14:29:26.025Z","updated_at":"2019-09-03T21:56:32.412Z","kind":"exercise"}]},{"id":48,"title":"4 (3) - variable types - convert between int and str","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":7,"published":null,"created_at":"2019-08-29T12:29:53.658Z","updated_at":"2019-09-11T02:52:27.687Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":641,"title":null,"prerequisites":null,"position":8,"instructions":"Change line 1 so the the following is output:\n\n```\nName = avar\nValue = 3\n<class 'int'>\n```\n","solution_code":"avar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = \"3\"\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'int'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:00:51.237Z","updated_at":"2019-09-03T21:58:23.486Z","kind":"exercise"},{"id":635,"title":null,"prerequisites":null,"position":2,"instructions":"Complete the second `print` statement so that the following is output:\n\n```\nName = avar\nValue = 3\n```\n\nYou may not use the number `3` in the `print` statement. You must use the variable `avar`. Refer to the previous exercise if you need a hint.","solution_code":"avar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Name=avarValue=3', \"Success output\", \"Failure output\")\nphanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T14:36:29.864Z","updated_at":"2019-09-03T21:57:10.355Z","kind":"exercise"},{"id":644,"title":null,"prerequisites":null,"position":11,"instructions":"Fix the bug by changing line 3. You will need to convert `avar` to a string using the `str()` function. See previous exercises for hints. Do not change line 1.\n","solution_code":"avar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + avar)\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'int'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:04:41.114Z","updated_at":"2019-08-29T15:07:27.189Z","kind":"exercise"},{"id":636,"title":null,"prerequisites":null,"position":3,"instructions":"The variable `avar` is of *type* `int`. There are a few different *types* of variables -- we've seen two so far: `int` and `str` (meaning `string`). Change line 1 of the code so the following is output:\n\n```\nName = avar\nValue = 4\n<class 'int'>\n```","solution_code":"avar = 4\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=4<class'int'>\", \"Success output\", \"Failure output\")\nphanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T14:42:44.423Z","updated_at":"2019-09-03T21:57:23.350Z","kind":"exercise"},{"id":637,"title":null,"prerequisites":null,"position":4,"instructions":"The `type` function gives the type of a variable. As given, the type of `avar` is `int`. Change the type to be a string by enclosing the `3` on line 1 in quotes. Your output will be:\n\n```\nName = avar\nValue = 3\n<class 'str'>\n```\n\nHint: line 1 will look like this: `avar = \"3\"`","solution_code":"avar = \"3\"\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'str'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T14:50:20.353Z","updated_at":"2019-09-03T21:57:38.486Z","kind":"exercise"},{"id":639,"title":null,"prerequisites":null,"position":6,"instructions":"Change line 1 so the the following is output:\n\n```\nName = avar\nValue = 3\n<class 'str'>\n```\n\nHint: add quotation marks.","solution_code":"avar = \"3\"\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'str'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T14:58:11.141Z","updated_at":"2019-09-03T21:58:04.098Z","kind":"exercise"},{"id":638,"title":null,"prerequisites":null,"position":5,"instructions":"Add a `print` statement that prints the type of `avar`. Your output should be:\n\n```\nName = avar\nValue = 3\n<class 'int'>\n```\n\nLook at the previous exercise if you need a hint.","solution_code":"avar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'int'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T14:54:27.141Z","updated_at":"2019-09-03T21:57:51.664Z","kind":"exercise"},{"id":640,"title":null,"prerequisites":null,"position":7,"instructions":"Change line 1 so the the following is output:\n\n```\nName = avar\nValue = 3\n<class 'int'>\n```\n\nHint: remove quotation marks.","solution_code":"avar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = \"3\"\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'int'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:00:18.870Z","updated_at":"2019-09-03T21:58:14.187Z","kind":"exercise"},{"id":646,"title":null,"prerequisites":null,"position":13,"instructions":"Change the value of `a` (line 1) so the program outputs `8`.\n\nHeads up: do *not* convert `a` to an `int` in line 1.","solution_code":"a = \"4\"\nb = 4\nprint(int(a) + b)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"3\"\nb = 4\nprint(int(a) + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n#phanon_test(output == \"Name=avarValue=3<class'int'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:10:15.984Z","updated_at":"2019-09-03T22:00:19.024Z","kind":"exercise"},{"id":651,"title":null,"prerequisites":null,"position":18,"instructions":"Change line 4 to output `278`. Change only line 4.\n","solution_code":"a = \"2\"\nb = 7\nc = \"8\"\nprint(a + str(b) + c)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"2\"\nb = 7\nc = \"8\"\nprint(a + b + c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"278\", \"Success output\", \"Failure output\")\nphanon_test(code.find('print(a+str(b)+c') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:17:00.534Z","updated_at":"2019-09-03T22:02:51.991Z","kind":"exercise"},{"id":645,"title":null,"prerequisites":null,"position":12,"instructions":"We can also convert strings to integers using the `int()` function. Change line 2 so that the program outputs `8`.\n\nHint: you will change the value of `b` to 5.","solution_code":"a = \"3\"\nb = 5\nprint(int(a) + b)\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"3\"\nb = 4\nprint(int(a) + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n#phanon_test(output == \"Name=avarValue=3<class'int'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test_equals(b, 5, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:07:33.817Z","updated_at":"2019-09-03T22:00:05.709Z","kind":"exercise"},{"id":650,"title":null,"prerequisites":null,"position":17,"instructions":"Change line 3 to output `27`. Change only line 3.\n","solution_code":"a = \"2\"\nb = 7\nprint(a + str(b))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"2\"\nb = 7\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"27\", \"Success output\", \"Failure output\")\nphanon_test(code.find('print(a+str(b)') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:16:15.015Z","updated_at":"2019-09-03T22:01:13.777Z","kind":"exercise"},{"id":647,"title":null,"prerequisites":null,"position":14,"instructions":"Convert `a` to an integer in line 3 to output `7`.\n\nChange only line 3. See previous exercise if you need a hint.","solution_code":"a = \"3\"\nb = 4\nprint(int(a) + b)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"3\"\nb = 4\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"7\", \"Success output\", \"Failure output\")\nphanon_test(code.find('print(int(a)+b') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:11:36.042Z","updated_at":"2019-09-03T22:00:32.587Z","kind":"exercise"},{"id":652,"title":null,"prerequisites":null,"position":19,"instructions":"Change line 4 to output `17`.\n\nHint: you will need to use the `int()` function twice.\n","solution_code":"a = \"2\"\nb = 7\nc = \"8\"\nprint(int(a) + b + int(c))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"2\"\nb = 7\nc = \"8\"\nprint(a + b + c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"17\", \"Success output\", \"Failure output\")\nphanon_test(code.find('print(int(a)+b+int(c)') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:18:15.428Z","updated_at":"2019-09-03T22:03:23.228Z","kind":"exercise"},{"id":649,"title":null,"prerequisites":null,"position":16,"instructions":"Change line 3 to output `9`. Change only line 3.\n","solution_code":"a = \"2\"\nb = 7\nprint(int(a) + b)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"2\"\nb = 7\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"9\", \"Success output\", \"Failure output\")\nphanon_test(code.find('print(int(a)+b') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:15:05.098Z","updated_at":"2019-09-03T22:01:02.580Z","kind":"exercise"},{"id":648,"title":null,"prerequisites":null,"position":15,"instructions":"Convert `b` to a string in line 3 to output `34`. Change only line 3.\n\nHint: you will use the `str()` function.","solution_code":"a = \"3\"\nb = 4\nprint(a + str(b))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\na = \"3\"\nb = 4\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"34\", \"Success output\", \"Failure output\")\nphanon_test(code.find('print(a+str(b)') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test_equals(a, \"4\", \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:13:32.993Z","updated_at":"2019-09-03T22:00:47.035Z","kind":"exercise"},{"id":642,"title":null,"prerequisites":null,"position":9,"instructions":"Change line 1 so the the following is output:\n\n```\nName = avar\nValue = 3\n<class 'str'>\n```\n","solution_code":"avar = \"3\"\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'str'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:01:54.659Z","updated_at":"2019-09-03T21:59:01.369Z","kind":"exercise"},{"id":643,"title":null,"prerequisites":null,"position":10,"instructions":"You can't concatenate an `int` and a `str` (see the error for line 3). Fix the error by changing line 1. Change *only* line 1.\n\nHint: make `avar` a string by adding quotation marks.\n","solution_code":"avar = \"3\"\nprint(\"Name = avar\")\nprint(\"Value = \" + avar)\nprint(type(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + avar)\nprint(type(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == \"Name=avarValue=3<class'str'>\", \"Success output\", \"Failure output\")\n#phanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T15:02:30.225Z","updated_at":"2019-08-29T15:05:10.003Z","kind":"exercise"},{"id":619,"title":null,"prerequisites":null,"position":0,"instructions":"A variable has a name, value and type. This code has a variable with the name `avar`. Add a `print` statement that prints \n\n```\nName = avar\n```\n\nHint: you will add the following code: `print(\"Name = avar\")`\n\nNote: your code will not print `3`. And make sure capitalization is correct!","solution_code":"avar = 3\nprint(\"Name = avar\")","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Name=avar', \"Success output\", \"Failure output\")\n# phanon_test_equals(actualValue, expectedValue, \"identifierName\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T12:29:58.305Z","updated_at":"2019-09-03T21:56:46.389Z","kind":"exercise"},{"id":620,"title":null,"prerequisites":null,"position":1,"instructions":"This code outputs the following:\n\n```\nName = avar\nValue = 3\n```\n\nInside the second `print` statement we concatenate strings. The problem is that `avar` is not a string -- it's a number! So we have to convert it to a string using `str()`. Change the value of `avar` so the following is output:\n\n`Name = avar`\n`Value = 4`\n\nYou should only change the first line of code.\n","solution_code":"avar = 4\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\navar = 3\nprint(\"Name = avar\")\nprint(\"Value = \" + str(avar))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Name=avarValue=4', \"Success output\", \"Failure output\")\nphanon_test(code.find('Value=\"+str(avar))') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test_equals(avar, 4, \"avar\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":48,"phanon_module_id":null,"created_at":"2019-08-29T12:43:56.304Z","updated_at":"2019-09-03T21:56:55.571Z","kind":"exercise"}]},{"id":20,"title":"2a (1) - arithmetic operators I and precedence","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":3,"published":null,"created_at":"2019-08-16T21:35:58.827Z","updated_at":"2019-09-09T15:42:37.517Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":256,"title":null,"prerequisites":null,"position":20,"instructions":"Add parentheses to line 4 as necessary so that the program outputs `9`.","solution_code":"a = 3\nb = 5\nc = 2\nd = a * (b - c)\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nc = 2\nd = a * b - c\nprint(d)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '9\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 5)\nphanon_h_test_equals(c, 2)\nphanon_h_test_equals(d, 9)\nphanon_h_test_greater_than(code.find('d=a*(b-c)'), -1,)\nphanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T23:06:40.727Z","updated_at":"2019-09-03T21:53:08.593Z","kind":"exercise"},{"id":255,"title":null,"prerequisites":null,"position":19,"instructions":"Because of the parentheses, the subtraction will happen before the multiplication. Assign a different value to `a` such that `6` is printed out. Change only line 1.","solution_code":"a = 2\nb = 5\nc = 2\nd = a * (b - c)\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nc = 2\nd = a * (b - c)\nprint(d)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '6\\n', 'Output is correct', 'Output is not correct')\nphanon_test(a==2, 'a is correct', 'a is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 2)\nphanon_h_test_equals(b, 5)\nphanon_h_test_equals(c, 2)\nphanon_h_test_equals(d, 6)\nphanon_h_test_greater_than(code.find('d=a*(b-c)'), -1,)\nphanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T23:03:25.543Z","updated_at":"2019-09-03T21:53:15.931Z","kind":"exercise"},{"id":224,"title":null,"prerequisites":null,"position":5,"instructions":"Assign the product of `a` and `b` to a variable `c` and print `c`.","solution_code":"a = 3\nb = 4\nc = a * b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '12\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 12)\nphanon_h_test_greater_than(code.find('c=a*b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T21:37:53.307Z","updated_at":"2019-08-16T23:13:53.790Z","kind":"exercise"},{"id":252,"title":null,"prerequisites":null,"position":16,"instructions":"Assign a different value to `c` such that `18` is printed out.","solution_code":"a = 2\nb = 3\nc = 3\nd = a * b * c\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nb = 3\nc = 2\nd = a * b * c\nprint(d)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '18\\n', 'Output is correct', 'Output is not correct')\nphanon_test(c==3, 'c is correct', 'c is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 2)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 3)\nphanon_h_test_equals(d, 18)\nphanon_h_test_greater_than(code.find('d=a*b*c'), -1,)\nphanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:52:56.081Z","updated_at":"2019-09-03T21:53:31.874Z","kind":"exercise"},{"id":253,"title":null,"prerequisites":null,"position":17,"instructions":"Assign a different value to `c` such that `3` is printed out.","solution_code":"a = 2\nb = 3\nc = 3\nd = a * b - c\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nb = 3\nc = 2\nd = a * b - c\nprint(d)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3\\n', 'Output is correct', 'Output is not correct')\nphanon_test(c==3, 'c is correct', 'c is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 2)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 3)\nphanon_h_test_equals(d, 3)\nphanon_h_test_greater_than(code.find('d=a*b-c'), -1,)\nphanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:56:46.827Z","updated_at":"2019-09-03T21:53:26.195Z","kind":"exercise"},{"id":258,"title":null,"prerequisites":null,"position":2,"instructions":"`c` is the difference of `a` and `b`. Add a `print` statement that prints `c`.","solution_code":"a = 4\nb = 3\nc = a - b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = 3\nc = a - b\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 4)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 1)\nphanon_h_test_greater_than(code.find('c=a-b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T23:09:07.832Z","updated_at":"2019-08-16T23:12:21.656Z","kind":"exercise"},{"id":226,"title":null,"prerequisites":null,"position":12,"instructions":"Print the value of `c`. Note that the result is 4 -- maybe not what you expected!","solution_code":"a = 13\nb = 3\nc = a // b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 13\nb = 3\nc = a // b\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 13)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 4)\nphanon_h_test_greater_than(code.find('c=a//b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T21:44:11.492Z","updated_at":"2019-08-16T23:15:26.426Z","kind":"exercise"},{"id":223,"title":null,"prerequisites":null,"position":0,"instructions":"`b` is the difference of `a` and 1. Add a `print` statement that prints `b`.","solution_code":"a = 4\nb = a - 3\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = a - 3\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 4)\nphanon_h_test_equals(b, 1)\nphanon_h_test_greater_than(code.find('b=a-3'), -1,)\nphanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T21:36:12.062Z","updated_at":"2019-08-16T23:12:11.360Z","kind":"exercise"},{"id":227,"title":null,"prerequisites":null,"position":14,"instructions":"Change the value assigned to `a` such that `3` is printed.\n\n*Note: there are actually 3 different values you can assign to `a` to make this happen.*","solution_code":"a = 9\nb = 3\nc = a // b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 13\nb = 3\nc = a // b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3\\n', 'Output is correct', 'Output is not correct')\nphanon_test(a==9 or a==10 or a==11, 'a is correct', 'a is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a//b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T21:46:53.692Z","updated_at":"2019-09-03T21:52:45.355Z","kind":"exercise"},{"id":259,"title":null,"prerequisites":null,"position":1,"instructions":"Change the `3` on line 2 such that `3` is printed.","solution_code":"a = 4\nb = a - 1\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = a - 3\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 4)\nphanon_h_test_equals(b, 3)\nphanon_h_test_greater_than(code.find('b=a-1'), -1,)\nphanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T23:10:29.067Z","updated_at":"2019-09-03T21:51:38.493Z","kind":"exercise"},{"id":250,"title":null,"prerequisites":null,"position":4,"instructions":"`c` is the product of `a` and `b`. Add a `print` statement that prints `c`.","solution_code":"a = 3\nb = 4\nc = a * b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nc = a * b\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '12\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 12)\nphanon_h_test_greater_than(code.find('c=a*b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:50:09.566Z","updated_at":"2019-08-16T23:13:34.135Z","kind":"exercise"},{"id":230,"title":null,"prerequisites":null,"position":6,"instructions":"The `/` operator performs division. Print the value of `c`.","solution_code":"a = 12\nb = 3\nc = a / b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 12\nb = 3\nc = a / b\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4.0\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 12)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 4)\nphanon_h_test_greater_than(code.find('c=a/b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:01:36.206Z","updated_at":"2019-08-16T23:14:06.752Z","kind":"exercise"},{"id":235,"title":null,"prerequisites":null,"position":8,"instructions":"Assign the variable `c` the value of `a` divided by `b`.","solution_code":"a = 5\nb = 2\nc = a / b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nb = 2\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '2.5\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\nphanon_h_test_equals(b, 2)\nphanon_h_test_equals(c, 2.5)\nphanon_h_test_greater_than(code.find('c=a/b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:27:33.360Z","updated_at":"2019-08-16T23:14:25.829Z","kind":"exercise"},{"id":229,"title":null,"prerequisites":null,"position":13,"instructions":"Assign the variable `c` to be `a` divided by `b` using integer division.","solution_code":"a = 13\nb = 3\nc = a // b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 13\nb = 3\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 13)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 4)\nphanon_h_test_greater_than(code.find('c=a//b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:00:29.544Z","updated_at":"2019-08-16T23:15:32.296Z","kind":"exercise"},{"id":234,"title":null,"prerequisites":null,"position":7,"instructions":"Assign the variable `c` the value of `a` divided by `b`.","solution_code":"a = 12\nb = 3\nc = a / b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 12\nb = 3\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4.0\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 12)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 4)\nphanon_h_test_greater_than(code.find('c=a/b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:26:24.876Z","updated_at":"2019-08-16T23:14:14.790Z","kind":"exercise"},{"id":236,"title":null,"prerequisites":null,"position":9,"instructions":"Assign a new value to the variable `a` such that `3.0` is printed. Change only line 1.","solution_code":"a = 6\nb = 2\nc = a / b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nb = 2\nc = a / b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3.0\\n', 'Output is correct', 'Output is not correct. Should print 3.')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 6)\nphanon_h_test_equals(b, 2)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a/b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:28:13.484Z","updated_at":"2019-09-03T21:52:15.934Z","kind":"exercise"},{"id":225,"title":null,"prerequisites":null,"position":11,"instructions":"The `//` operator performs \"integer division,\" where it divides the numbers and truncates the result to be the integer just lower than or equal to the result. Print the value of `c`.","solution_code":"a = 12\nb = 3\nc = a // b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 12\nb = 3\nc = a // b\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 12)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 4)\nphanon_h_test_greater_than(code.find('c=a//b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T21:39:26.544Z","updated_at":"2019-08-16T23:15:20.383Z","kind":"exercise"},{"id":249,"title":null,"prerequisites":null,"position":15,"instructions":"Change the value assigned to `a` such that `3` is printed. The value you assign must be even (not odd).\n\n*Note: there is only one value you can assign to `a` to make this happen.*","solution_code":"a = 10\nb = 3\nc = a // b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 13\nb = 3\nc = a // b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3\\n', 'Output is correct', 'Output is not correct')\nphanon_test(a==10, 'a is correct', 'a is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a//b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:49:00.088Z","updated_at":"2019-09-03T21:52:52.117Z","kind":"exercise"},{"id":251,"title":null,"prerequisites":null,"position":3,"instructions":"Assign variable `c` to be the difference of `a` and `b` such that `4` is printed out.","solution_code":"a = 7\nb = 3\nc = a - b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 7\nb = 3\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4\\n', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 7)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 4)\nphanon_h_test_greater_than(code.find('c=a-b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:50:56.251Z","updated_at":"2019-09-03T21:51:54.496Z","kind":"exercise"},{"id":248,"title":null,"prerequisites":null,"position":10,"instructions":"Assign a new value to the variable `b` such that `1.5` is printed. Change only line 2.","solution_code":"a = 3\nb = 2\nc = a / b\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 1\nc = a / b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1.5\\n', 'Output is correct', 'Output is not correct. Should print 3.')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 2)\nphanon_h_test_equals(c, 1.5)\nphanon_h_test_greater_than(code.find('c=a/b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:43:23.582Z","updated_at":"2019-09-03T21:52:21.580Z","kind":"exercise"},{"id":254,"title":null,"prerequisites":null,"position":18,"instructions":"Assign a different value to `c` such that `3` is printed out. Note that the multiplication happens before the subtraction.","solution_code":"a = 3\nb = 5\nc = 12\nd = a * b - c\nprint(d)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nc = 2\nd = a * b - c\nprint(d)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3\\n', 'Output is correct', 'Output is not correct')\nphanon_test(c==12, 'c is correct', 'c is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 3)\nphanon_h_test_equals(b, 5)\nphanon_h_test_equals(c, 12)\nphanon_h_test_equals(d, 3)\nphanon_h_test_greater_than(code.find('d=a*b-c'), -1,)\nphanon_h_test_greater_than(code.find('print(d)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":20,"phanon_module_id":null,"created_at":"2019-08-16T22:59:12.726Z","updated_at":"2019-09-03T21:53:21.591Z","kind":"exercise"}]},{"id":82,"title":"2b (1) - arithmetic operators II - mod","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":4,"published":null,"created_at":"2019-09-09T15:42:12.408Z","updated_at":"2019-09-09T15:53:12.068Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1114,"title":null,"prerequisites":null,"position":6,"instructions":"Change the value of `a` to any number such that the code outputs `3`. Change only line 1.\n","solution_code":"a = 17\nb = 7\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 16\nb = 7\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 17)\nphanon_h_test_equals(b, 7)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T16:39:12.490Z","updated_at":"2019-09-09T16:39:38.920Z","kind":"exercise"},{"id":1110,"title":null,"prerequisites":null,"position":3,"instructions":"On line 3 assign variable `c` to be the remainder of `a/b`.\n","solution_code":"a = 69\nb = 60\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 69\nb = 60\n\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '9', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 69)\nphanon_h_test_equals(b, 60)\nphanon_h_test_equals(c, 9)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T16:06:47.428Z","updated_at":"2019-09-09T16:36:55.167Z","kind":"exercise"},{"id":1108,"title":null,"prerequisites":null,"position":2,"instructions":"On line 3 assign variable `c` to be the remainder of `a/b`. Use the `%` operator.\n","solution_code":"a = 18\nb = 4\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 18\nb = 4\n\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '2', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 18)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 2)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T15:59:48.020Z","updated_at":"2019-09-09T16:36:53.855Z","kind":"exercise"},{"id":1111,"title":null,"prerequisites":null,"position":4,"instructions":"Change the value of `a` to any number such that the code outputs `1`. Change only line 1.\n","solution_code":"a = 17\nb = 4\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 16\nb = 4\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 17)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 1)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T16:36:52.125Z","updated_at":"2019-09-09T16:38:23.816Z","kind":"exercise"},{"id":1113,"title":null,"prerequisites":null,"position":5,"instructions":"Change the value of `a` to any number such that the code outputs `3`. Change only line 1.\n","solution_code":"a = 19\nb = 4\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 16\nb = 4\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 17)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T16:38:36.387Z","updated_at":"2019-09-09T16:39:00.906Z","kind":"exercise"},{"id":1115,"title":null,"prerequisites":null,"position":7,"instructions":"Change the value of `b` to any number such that the code outputs `3`. Change only line 2.\n","solution_code":"a = 15\nb = 4\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 15\nb = 3\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 17)\nphanon_h_test_equals(a, 15)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T16:39:57.554Z","updated_at":"2019-09-09T16:40:48.880Z","kind":"exercise"},{"id":1116,"title":null,"prerequisites":null,"position":8,"instructions":"Change the value of `b` to any number such that the code outputs `3`. Change only line 2.\n","solution_code":"a = 27\nb = 4\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 27\nb = 3\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '3', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 17)\nphanon_h_test_equals(a, 27)\nphanon_h_test_equals(c, 3)\nphanon_h_test_greater_than(code.find('c=a%b'), -1,)\nphanon_h_test_greater_than(code.find('print(c)'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T16:40:53.628Z","updated_at":"2019-09-09T16:41:58.689Z","kind":"exercise"},{"id":1106,"title":null,"prerequisites":null,"position":0,"instructions":"The `%` operator (called the mod or modulo operator) gets the remainder after division. 7%3 is 1 (since 7/3 = 2 remainder 1). Change the value of `a` by 1 so that the code outputs `2`.\n\nHint: you will change `a` to be 8.","solution_code":"a = 8\nb = 3\nc = a % b\nprint(c)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 7\nb = 3\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '2', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 8)\nphanon_h_test_equals(b, 3)\nphanon_h_test_equals(c, 2)\n#phanon_h_test_greater_than(code.find('b=a-3'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T15:42:47.595Z","updated_at":"2019-09-09T15:53:55.066Z","kind":"exercise"},{"id":1107,"title":null,"prerequisites":null,"position":1,"instructions":"Change the value of `a` by 1 so that the code outputs `1`.\n","solution_code":"a = 17\nb = 4\nc = a % b\nprint(c)\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 16\nb = 4\nc = a % b\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 17)\nphanon_h_test_equals(b, 4)\nphanon_h_test_equals(c, 1)\n#phanon_h_test_greater_than(code.find('b=a-3'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":82,"phanon_module_id":null,"created_at":"2019-09-09T15:54:03.829Z","updated_at":"2019-09-09T15:56:28.006Z","kind":"exercise"}]},{"id":140,"title":"17 (16) - conditionals III - if/elif/else with and/or/not","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":22,"published":null,"created_at":"2019-09-25T11:37:39.186Z","updated_at":"2019-10-03T20:49:42.898Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":2050,"title":null,"prerequisites":null,"position":1,"instructions":"Write `if/elif/else` statements that print `prime` if `a` is 7, 11, or 13,\n`highly composite` if `a` is 6, 12, or 24, and `composite` if `a` is\nsomething else. \nYour program should output\n```\nhighly composite\n```\n\nHint: the `if` and `elif` statements will each have two `or` logical operations.\n\nAnother hint: the `if` statement will read `if a == 7 or a == 11 or a == 13:`","solution_code":"a = 24\nif a == 7 or a == 11 or a == 13:\n    print(\"prime\")\nelif a == 6 or a == 12 or a == 24:\n    print(\"highly composite\")\nelse:\n    print(\"composite\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 24\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'highlycomposite', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'a = 24if a == 7 or a == 11 or a == 13:    print(\"prime\")elif a == 6 or a == 12 or a == 24:    print(\"highly composite\")else:    print(\"composite\")'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":140,"phanon_module_id":null,"created_at":"2019-09-25T12:10:30.381Z","updated_at":"2019-09-25T12:19:38.886Z","kind":"exercise"},{"id":2052,"title":null,"prerequisites":null,"position":3,"instructions":"Print `Prisoner` if movie is 3, `Goblet` if movie is 4, and `Deathly`\nif movie is 7 or 8. Don't worry about the remaining movies.\nYour program should output\n```\nDeathly\n```\n","solution_code":"movie = 7\nif movie == 3:\n    print(\"Prisoner\")\nelif movie == 4:\n    print(\"Goblet\")\nelif movie == 7 or movie == 8:\n    print(\"Deathly\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nmovie = 7\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Deathly', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'movie = 7if movie == 3:    print(\"Prisoner\")elif movie == 4:    print(\"Goblet\")elif movie == 7 or movie == 8:    print(\"Deathly\")'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":140,"phanon_module_id":null,"created_at":"2019-09-25T12:16:22.906Z","updated_at":"2019-09-30T16:32:39.271Z","kind":"exercise"},{"id":2044,"title":null,"prerequisites":null,"position":0,"instructions":"Write `if/elif/else` statements that print `unlucky` if `a` is 3 or 13,\n`lucky` if `a` is 7, and `boring` if `a` is\nsomething else. \nYour program should output\n```\nunlucky\n```\n\nHint: the `if` and `elif` statements will each have two `or` logical operations.\n\nAnother hint: the `if` statement will read `if a == 7 or a == 11 or a == 13:`","solution_code":"a = 13\nif a == 3 or a == 13:\n    print(\"unlucky\")\nelif a == 7:\n    print(\"lucky\")\nelse:\n    print(\"boring\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 13\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'unlucky', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'a = 13if a == 3 or a == 13:    print(\"unlucky\")elif a == 7:    print(\"lucky\")else:    print(\"boring\")'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":140,"phanon_module_id":null,"created_at":"2019-09-25T11:37:55.102Z","updated_at":"2019-09-25T12:19:30.733Z","kind":"exercise"},{"id":2051,"title":null,"prerequisites":null,"position":2,"instructions":"`m` represents the month number. Print `Jan` if `m` is 1, `Feb` if `m`\nis 2, and `Mar` if `m` is 3. Don't worry about the remaining months.\nYou will not have an `else` statement. \nYour program should output\n```\nFeb\n```\n","solution_code":"m = 2\nif m == 1:\n    print(\"Jan\")\nelif m == 2:\n    print(\"Feb\")\nelif m == 3:\n    print(\"Mar\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nm = 2\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Feb', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'm = 2if m == 1:    print(\"Jan\")elif m == 2:    print(\"Feb\")elif m == 3:    print(\"Mar\")'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":140,"phanon_module_id":null,"created_at":"2019-09-25T12:13:35.860Z","updated_at":"2019-09-30T16:32:35.671Z","kind":"exercise"}]},{"id":138,"title":"15 (14) - conditionals III - elif","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":20,"published":null,"created_at":"2019-09-25T03:19:38.989Z","updated_at":"2019-10-03T20:49:45.271Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":2030,"title":null,"prerequisites":null,"position":4,"instructions":"Write `if/elif/else` statements that print `zero` if `a == 0`,\n`one` if `a == 1`, and `not binary` if a is something else. Your program\nshould output\n```\none\n```","solution_code":"a = 1\nif a == 0:\n    print(\"zero\")\nelif a == 1:\n    print(\"one\")\nelse:\n    print(\"not binary\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 1\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'one', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 1, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'a = 1if a == 0:    print(\"zero\")elif a == 1:    print(\"one\")else:    print(\"not binary\")'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":138,"phanon_module_id":null,"created_at":"2019-09-25T10:45:03.542Z","updated_at":"2019-09-25T12:24:52.672Z","kind":"exercise"},{"id":2026,"title":null,"prerequisites":null,"position":0,"instructions":"Change the value of `a` so that `Is four` is output.","solution_code":"a = 4\nif a == 3:\n    print('Is three')\nelif a == 4:\n    print('Is four')\nelse:\n    print('Is something else')","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 3:\n    print('Is three')\nelif a == 4:\n    print('Is four')\nelif a == 5:\n    print(\"Is five\")\nelse:\n    print('Is something else')\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Isfour', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 4, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('print(\"Your') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":138,"phanon_module_id":null,"created_at":"2019-09-25T03:19:47.072Z","updated_at":"2019-09-25T12:24:19.021Z","kind":"exercise"},{"id":2029,"title":null,"prerequisites":null,"position":3,"instructions":"Write `if/elif/else` statements that print `zero` if `a == 0`,\n`one` if `a == 1`, and `not binary` if a is something else. Your program\nshould output\n```\nzero\n```","solution_code":"a = 0\nif a == 0:\n    print(\"zero\")\nelif a == 1:\n    print(\"one\")\nelse:\n    print(\"not binary\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 0\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'zero', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 0, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'a = 0if a == 0:    print(\"zero\")elif a == 1:    print(\"one\")else:    print(\"not binary\")'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":138,"phanon_module_id":null,"created_at":"2019-09-25T10:38:01.471Z","updated_at":"2019-09-25T12:24:49.952Z","kind":"exercise"},{"id":2028,"title":null,"prerequisites":null,"position":2,"instructions":"Add a new `elif` statement after all existing `elif`s that prints \n`Is over four` if `a > 4`. Your program should output\n```\nIs over four\n```","solution_code":"a = 5\nif a == 3:\n    print(\"Is three\")\nelif a == 4:\n    print(\"Is four\")\nelif a > 4:\n    print(\"Is over four\")\nelse:\n    print(\"Is something else\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nif a == 3:\n    print(\"Is three\")\nelif a == 4:\n    print(\"Is four\")\nelse:\n    print(\"Is something else\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Isoverfour', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 5, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('elifa>4:print(\"Isoverfour\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":138,"phanon_module_id":null,"created_at":"2019-09-25T03:25:05.932Z","updated_at":"2019-09-25T03:26:49.473Z","kind":"exercise"},{"id":2027,"title":null,"prerequisites":null,"position":1,"instructions":"`elif` is short for \"else if\" and gives us a lot of flexibility in our \nif statements. Add a new `elif` statement after the existing `elif`\nthat prints `Is five` if `a == 5`.","solution_code":"a = 5\nif a == 3:\n    print(\"Is three\")\nelif a == 4:\n    print(\"Is four\")\nelif a == 5:\n    print(\"Is five\")\nelse:\n    print(\"Is something else\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nif a == 3:\n    print(\"Is three\")\nelif a == 4:\n    print(\"Is four\")\nelse:\n    print(\"Is something else\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Isfive', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 5, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('elifa==5:print(\"Isfive\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":138,"phanon_module_id":null,"created_at":"2019-09-25T03:21:28.113Z","updated_at":"2019-09-25T03:25:25.769Z","kind":"exercise"}]},{"id":116,"title":"11 (2) - boolean expressions I","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":16,"published":null,"created_at":"2019-09-19T21:05:19.921Z","updated_at":"2019-10-03T20:49:50.399Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1665,"title":null,"prerequisites":null,"position":20,"instructions":"Change the value of `a` so that the program outputs:\n```\nTrue\nFalse\n```\n","solution_code":"a = 6\nprint(a >= 6)\nprint(a != 6)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nprint(a >= 6)\nprint(a != 6)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'TrueFalse', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 6)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:35:33.782Z","updated_at":"2019-09-19T21:37:30.133Z","kind":"exercise"},{"id":1670,"title":null,"prerequisites":null,"position":25,"instructions":"Change the value of `a` so that the program outputs:\n```\nFalse\n```\n","solution_code":"a = 6\nb = 3\nc = a < b*2\nprint(c)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 1\nb = 3\nc = a < b*2\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 2)\nphanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:39:48.521Z","updated_at":"2019-09-19T21:40:46.093Z","kind":"exercise"},{"id":1669,"title":null,"prerequisites":null,"position":24,"instructions":"Variables can take boolean values. Change the value of `a` so that the program outputs:\n```\nTrue\n```\n","solution_code":"a = 2\nb = 3\nc = a*3 == b*2\nprint(c)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 1\nb = 3\nc = a*3 == b*2\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 2)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:38:53.546Z","updated_at":"2019-09-19T21:39:44.442Z","kind":"exercise"},{"id":1667,"title":null,"prerequisites":null,"position":22,"instructions":"Change the value of `a` so that the program outputs:\n```\nTrue\n```\n","solution_code":"a = 5\nb = 10\nprint(a == b/2)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = 10\nprint(a == b/2)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:37:05.729Z","updated_at":"2019-09-19T21:39:27.868Z","kind":"exercise"},{"id":1668,"title":null,"prerequisites":null,"position":23,"instructions":"Change the value of `a` so that the program outputs:\n```\nTrue\n```\n","solution_code":"a = 2\nb = 3\nprint(a*3 == b*2)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 1\nb = 3\nprint(a*3 == b*2)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 2)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:38:00.206Z","updated_at":"2019-09-19T21:39:31.508Z","kind":"exercise"},{"id":1646,"title":null,"prerequisites":null,"position":1,"instructions":"Change the code to print `True`.\n","solution_code":"print(True)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint()\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(True)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:07:27.925Z","updated_at":"2019-09-19T21:08:23.878Z","kind":"exercise"},{"id":1645,"title":null,"prerequisites":null,"position":0,"instructions":"There are two boolean values: `True` and `False`. Change the code to print `False`.\n\nHint: change `True` to `False`.","solution_code":"print(False)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(True)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(False)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:05:33.712Z","updated_at":"2019-09-19T21:06:58.410Z","kind":"exercise"},{"id":1647,"title":null,"prerequisites":null,"position":2,"instructions":"This code prints `True` because 5 is less than 10. Change the 5 to 15 so that `False` is output (since 15 is *not* less than 10).\n","solution_code":"print(15 < 10)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(5 < 10)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(15<10)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:08:27.699Z","updated_at":"2019-09-19T21:09:44.044Z","kind":"exercise"},{"id":1648,"title":null,"prerequisites":null,"position":3,"instructions":"This code prints `False` because 15 is not less than 10. Change the 15 to 9 so that `True` is output.\n","solution_code":"print(9 < 10)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(15 < 10)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(9<10)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:09:48.386Z","updated_at":"2019-09-19T21:10:31.370Z","kind":"exercise"},{"id":1649,"title":null,"prerequisites":null,"position":4,"instructions":"This code prints `True` because 15 is greater than 10. Change the greater than sign `>` to a less than sign `<` so that `False` is output.\n","solution_code":"print(15 < 10)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(15 > 10)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(15<10)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:10:43.764Z","updated_at":"2019-09-19T21:11:48.042Z","kind":"exercise"},{"id":1650,"title":null,"prerequisites":null,"position":5,"instructions":"Replace the question mark `?` with either `<` or `>` so that `True` is output.\n","solution_code":"print(15 > 10)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(15 ? 10)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(15>10)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:11:53.446Z","updated_at":"2019-09-19T21:12:37.296Z","kind":"exercise"},{"id":1651,"title":null,"prerequisites":null,"position":6,"instructions":"Replace the question mark `?` with either `<` or `>` so that `True` is output.\n","solution_code":"print(-9 < -7)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(-9 ? -7)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(-9<-7)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:12:42.457Z","updated_at":"2019-09-19T21:13:11.945Z","kind":"exercise"},{"id":1655,"title":null,"prerequisites":null,"position":10,"instructions":"Add the character `=` somewhere so that `True` is output. Don't change any other code.\n","solution_code":"a = 12\nb = 12\nprint(a >= b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 12\nb = 12\nprint(a > b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:16:17.177Z","updated_at":"2019-09-19T21:17:58.430Z","kind":"exercise"},{"id":1652,"title":null,"prerequisites":null,"position":7,"instructions":"Replace the question mark `?` with either `<` or `>` so that `True` is output.\n","solution_code":"a = 3\nb = 7\nprint(a < b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 7\nprint(a ? b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a<b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:13:30.495Z","updated_at":"2019-09-19T21:14:10.720Z","kind":"exercise"},{"id":1653,"title":null,"prerequisites":null,"position":8,"instructions":"Replace the question mark `?` with either `<` or `>` so that `False` is output.\n","solution_code":"a = 3\nb = 7\nprint(a > b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 7\nprint(a ? b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a>b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:14:14.399Z","updated_at":"2019-09-19T21:14:32.851Z","kind":"exercise"},{"id":1654,"title":null,"prerequisites":null,"position":9,"instructions":"`<=` means \"less than or equal to\". Replace `<=` with `<` so that `False` is output.\n","solution_code":"a = 7\nb = 7\nprint(a < b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 7\nb = 7\nprint(a <= b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a<b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:14:37.297Z","updated_at":"2019-09-19T21:15:54.270Z","kind":"exercise"},{"id":1657,"title":null,"prerequisites":null,"position":13,"instructions":"Change the value of `a` so that `False` is output. Change only line 1.\n","solution_code":"a = 6\nb = 5\nprint(a <= b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nprint(a <= b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:20:39.334Z","updated_at":"2019-09-19T21:25:24.140Z","kind":"exercise"},{"id":1656,"title":null,"prerequisites":null,"position":11,"instructions":"Change the value of `a` so that `False` is output. Change only line 1.\n","solution_code":"a = 13\nb = 12\nprint(a <= b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 12\nb = 12\nprint(a <= b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'False', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_greater_than(a, 12)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:18:00.957Z","updated_at":"2019-09-19T21:20:34.175Z","kind":"exercise"},{"id":1666,"title":null,"prerequisites":null,"position":21,"instructions":"Change the value of `a` so that the program outputs:\n```\nTrue\n```\n","solution_code":"a = 5\nb = 10\nprint(a*2 == b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = 10\nprint(a*2 == b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:36:26.575Z","updated_at":"2019-09-19T21:39:24.392Z","kind":"exercise"},{"id":1664,"title":null,"prerequisites":null,"position":19,"instructions":"Change the value of `a` so that the program outputs:\n```\nTrue\nTrue\n```\n","solution_code":"a = 6\nprint(a >= 6)\nprint(a == 6)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nprint(a >= 6)\nprint(a == 6)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'TrueTrue', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 6)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:31:14.979Z","updated_at":"2019-09-19T21:37:25.715Z","kind":"exercise"},{"id":1658,"title":null,"prerequisites":null,"position":15,"instructions":"Change the value of `a` so that the program outputs\n```\nFalse\nTrue\n```\n","solution_code":"a = 5\nb = 5\nprint(a < b)\nprint(a < b+1)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nprint(a < b)\nprint(a < b+1)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'FalseTrue', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:21:54.665Z","updated_at":"2019-09-19T21:25:21.807Z","kind":"exercise"},{"id":1661,"title":null,"prerequisites":null,"position":16,"instructions":"`==` means equals. Change the value of `a` so that `True` is output.\n","solution_code":"a = 5\nb = 5\nprint(a == b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nprint(a == b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:27:43.270Z","updated_at":"2019-09-19T21:28:25.541Z","kind":"exercise"},{"id":1662,"title":null,"prerequisites":null,"position":17,"instructions":"`!=` means not equal. Change the value of `a` so that `True` is output.\n","solution_code":"a = 4\nb = 5\nprint(a != b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nb = 5\nprint(a != b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'True', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a<5 or a>5, True)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:28:28.215Z","updated_at":"2019-09-19T21:29:45.303Z","kind":"exercise"},{"id":1659,"title":null,"prerequisites":null,"position":14,"instructions":"Change the value of `a` to another integer so that the program outputs\n```\nFalse\nTrue\n```\n","solution_code":"a = 6\nb = 5\nprint(a > b)\nprint(a < b+2)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 5\nprint(a > b)\nprint(a < b+2)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'TrueTrue', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 6)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:24:00.799Z","updated_at":"2019-09-19T21:27:30.412Z","kind":"exercise"},{"id":1663,"title":null,"prerequisites":null,"position":18,"instructions":"Change the value of `a` so that the program outputs:\n```\nTrue\nTrue\n```\n","solution_code":"a = 7\nprint(a >= 6)\nprint(a != 6)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 5\nprint(a >= 6)\nprint(a != 6)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'TrueTrue', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a>6, True)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:29:50.768Z","updated_at":"2019-09-19T21:37:21.776Z","kind":"exercise"},{"id":1660,"title":null,"prerequisites":null,"position":12,"instructions":"Change the value of `a` to another integer so that the program outputs\n```\nTrue\nTrue\n```\n","solution_code":"a = 6\nprint(a > 5)\nprint(a < 7)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a > 5)\nprint(a < 7)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'TrueTrue', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 6)\n#phanon_h_test_greater_than(a, 5)\n#phanon_h_test_greater_than(code.find('print(a>=b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":116,"phanon_module_id":null,"created_at":"2019-09-19T21:25:21.816Z","updated_at":"2019-10-02T18:48:56.950Z","kind":"exercise"}]},{"id":109,"title":"10 (3) - strings - escaping characters","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":15,"published":null,"created_at":"2019-09-17T21:59:04.117Z","updated_at":"2019-10-03T20:49:52.942Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1591,"title":null,"prerequisites":null,"position":34,"instructions":"Change the code to print `Hello world!` using the `strip()` function. Do not change line 3 and do not change any string literals.\n\nHeads up: note the space between the words.","solution_code":"a = \"Hello\\n\".strip()\nb = \" world!\"\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\\n\"\nb = \" world!\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('a = \"Hello\\\\n\".strip()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('b = \" world!\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a + b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:19:09.508Z","updated_at":"2019-09-18T14:19:48.714Z","kind":"exercise"},{"id":1570,"title":null,"prerequisites":null,"position":14,"instructions":"Write code to output\n```\nYou say, \"Goodbye\"\n```\n","solution_code":"print(\"You say, \\\"Goodbye\\\"\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'You say, \"Goodbye\"\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:21:26.437Z","updated_at":"2019-09-18T13:26:07.781Z","kind":"exercise"},{"id":1569,"title":null,"prerequisites":null,"position":13,"instructions":"Write code to output\n```\nSay \"Hello!\"\n```\n","solution_code":"print(\"Say \\\"Hello!\\\"\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Say \"Hello!\"\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:20:16.291Z","updated_at":"2019-09-18T13:21:22.274Z","kind":"exercise"},{"id":1567,"title":null,"prerequisites":null,"position":11,"instructions":"Change the code to output\n```\nSay \"Goodbye!\"\n```\n","solution_code":"print(\"Say \\\"Goodbye!\\\"\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Say \\\"Hello!\\\"\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Say \"Goodbye!\"\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:18:07.368Z","updated_at":"2019-09-18T13:19:31.276Z","kind":"exercise"},{"id":1568,"title":null,"prerequisites":null,"position":12,"instructions":"Change the code to output\n```\nSay \"Hello!\"\n```\n","solution_code":"print(\"Say \\\"Hello!\\\"\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Say Hello!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Say \"Hello!\"\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:19:41.173Z","updated_at":"2019-09-18T13:20:06.707Z","kind":"exercise"},{"id":1572,"title":null,"prerequisites":null,"position":15,"instructions":"Write code to output\n```\nI say, \"Hello\"\n```\n","solution_code":"print(\"I say, \\\"Hello\\\"\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'I say, \"Hello\"\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:26:14.701Z","updated_at":"2019-09-18T13:26:34.194Z","kind":"exercise"},{"id":1576,"title":null,"prerequisites":null,"position":19,"instructions":"Change the code to output `Hello world!`. (Change the period to an exclamation mark.)\n","solution_code":"hello = \"Hello\"\nworld = \"world\"\nprint(hello + \" \" + world + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nhello = \"Hello\"\nworld = \"world\"\nprint(hello + \" \" + world + \".\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(hello+\"\"+world+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:35:46.696Z","updated_at":"2019-09-18T13:43:13.719Z","kind":"exercise"},{"id":1574,"title":null,"prerequisites":null,"position":17,"instructions":"We can use the `upper()` function to change a string to be uppercase. Change the code to output `HELLO ALIEN!`. The string `alien` that you write must be all lowercase, like `world` is.\n","solution_code":"print(\"Hello alien!\".upper())\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Hello world!\".upper())\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HELLO ALIEN!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"Helloalien!\".upper())'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:30:03.950Z","updated_at":"2019-09-18T13:33:52.746Z","kind":"exercise"},{"id":1592,"title":null,"prerequisites":null,"position":35,"instructions":"Change the code to print `Hello world!` using the `strip()` function. Do not change line 3 and do not change any string literals.\n```\nHello\nworld!\n```","solution_code":"a = \"Hello\\n\"\nb = \" world!\"\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\\n\"\nb = \" world!\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello\\nworld!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('a = \"Hello\\\\n\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('b = \" world!\".strip()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a + b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:19:53.866Z","updated_at":"2019-09-18T14:20:41.739Z","kind":"exercise"},{"id":1571,"title":null,"prerequisites":null,"position":16,"instructions":"Write code to output\n```\nYou say, \"Goodbye\", I say, \"Hello\"\n```\n","solution_code":"print(\"You say, \\\"Goodbye\\\", I say, \\\"Hello\\\"\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'You say, \"Goodbye\", I say, \"Hello\"\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:25:45.616Z","updated_at":"2019-09-18T13:26:14.689Z","kind":"exercise"},{"id":1575,"title":null,"prerequisites":null,"position":18,"instructions":"We can use the `lower()` function to change a string to be lowercase. Change the code to output `hello alien!`. The string `ALIEN` that you write must be all uppercase, like `WORLD` is.\n","solution_code":"print(\"Hello ALIEN!\".lower())\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Hello WORLD!\".lower())\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'hello alien!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"HelloALIEN!\".lower())'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:34:07.995Z","updated_at":"2019-09-18T13:35:41.214Z","kind":"exercise"},{"id":1577,"title":null,"prerequisites":null,"position":20,"instructions":"Change the code to output `Hello world!`. (There needs to be a space between the words.)\n","solution_code":"hello = \"Hello\"\nworld = \"world\"\nprint(hello + \" \" + world + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nhello = \"Hello\"\nworld = \"world\"\nprint(hello + world + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(hello+\"\"+world+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:43:17.751Z","updated_at":"2019-09-18T13:43:52.416Z","kind":"exercise"},{"id":1585,"title":null,"prerequisites":null,"position":28,"instructions":"Change the code to output `HELLO world!` using the `lower()` and `upper()` functions. Change only line 3.\n\nHeads up: you will need to change the existing `lower()` call.\n","solution_code":"a = \"Hello\"\nb = \"WoRlD\"\nprint(a.upper() + \" \" + b.lower() + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"WoRlD\"\nprint(a.lower() + \" \" + b + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HELLO world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b=\"WoRlD\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a.upper()+\"\"+b.lower()+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:56:08.155Z","updated_at":"2019-09-18T14:05:23.244Z","kind":"exercise"},{"id":1587,"title":null,"prerequisites":null,"position":30,"instructions":"The `strip()` function removes whitespace (spaces, tabs, newlines) from the beginning and end of a string. Change the code to output `Helloworld!` using the `strip()` function. Change only line 2. Do not change the string literal (the stuff inside the quotes).\n\nHint: you will need to call `strip()` on the string literal on line 2, like is done in line 1.","solution_code":"a = \"Hello \".strip()\nb = \" world!\".strip()\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello \".strip()\nb = \" world!\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Helloworld!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b = \" world!\".strip()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a + b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:06:48.772Z","updated_at":"2019-09-18T14:14:13.861Z","kind":"exercise"},{"id":1590,"title":null,"prerequisites":null,"position":33,"instructions":"Change the code to print `Helloworld!` using the `strip()` function. Do not change line 3 and do not change any string literals.\n","solution_code":"a = \"Hello\\n\".strip()\nb = \" world!\".strip()\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\\n\"\nb = \" world!\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Helloworld!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('a = \"Hello\\\\n\".strip()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('b = \" world!\".strip()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a + b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:18:03.866Z","updated_at":"2019-09-18T14:19:01.362Z","kind":"exercise"},{"id":1579,"title":null,"prerequisites":null,"position":22,"instructions":"Change the code to output `Hello world!`.\n","solution_code":"a = \"Hello\"\nb = \"world\"\nprint(a + \" \" + b + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"world\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a+\"\"+b+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:45:03.403Z","updated_at":"2019-09-18T13:46:07.854Z","kind":"exercise"},{"id":1510,"title":null,"prerequisites":null,"position":3,"instructions":"Use a single `print()` call to output\n```\nWashington\nAdams\nJefferson\n```\n","solution_code":"print(\"Washington\\nAdams\\nJefferson\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Washington\\nAdams\\nJefferson\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('Washington\\\\nAdams\\\\nJefferson'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:05:43.520Z","updated_at":"2019-09-17T22:12:22.376Z","kind":"exercise"},{"id":1507,"title":null,"prerequisites":null,"position":0,"instructions":"The string `\\n` adds a newline. Change the following code to output\n```\nTuring\nKnuth\nHopper\n```\n\nHint: you'll replace the space with `\\n`.","solution_code":"print(\"Turing\\nKnuth\\nHopper\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Turing\\nKnuth Hopper\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Turing\\nKnuth\\nHopper\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('Turing\\\\nKnuth\\\\nHopper'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T21:59:08.333Z","updated_at":"2019-09-17T22:04:25.238Z","kind":"exercise"},{"id":1511,"title":null,"prerequisites":null,"position":4,"instructions":"Use a single `print()` call to output\n```\nUtah Colorado\nArizona New Mexico\n```\n","solution_code":"print(\"Utah Colorado\\nArizona New Mexico\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Utah Colorado\\nArizona New Mexico\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('Utah Colorado\\\\nArizona New Mexico'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:13:14.710Z","updated_at":"2019-09-17T22:14:23.058Z","kind":"exercise"},{"id":1508,"title":null,"prerequisites":null,"position":1,"instructions":"Change the following code to output\n```\nTuring\nKnuth\nHopper\n```\n\n","solution_code":"print(\"Turing\\nKnuth\\nHopper\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Turing Knuth Hopper\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Turing\\nKnuth\\nHopper\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('Turing\\\\nKnuth\\\\nHopper'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:04:29.679Z","updated_at":"2019-09-17T22:11:00.069Z","kind":"exercise"},{"id":1509,"title":null,"prerequisites":null,"position":2,"instructions":"Change the following code to output\n```\nTuring Knuth\nHopper\n```\n","solution_code":"print(\"Turing Knuth\\nHopper\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Turing Knuth Hopper\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Turing Knuth\\nHopper\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('TuringKnuth\\\\nHopper'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:05:00.693Z","updated_at":"2019-09-17T22:11:08.386Z","kind":"exercise"},{"id":1512,"title":null,"prerequisites":null,"position":5,"instructions":"Note that each call to `print()` implicitly puts a `\\n` at the end. Add another `print()` call so the following is output:\n```\nWindows\nMac\nLinux\n```\n","solution_code":"print(\"Windows\")\nprint(\"Mac\")\nprint(\"Linux\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Windows\")\nprint(\"Mac\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Windows\\nMac\\nLinux\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"Windows\")print(\"Mac\")print(\"Linux\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:14:34.194Z","updated_at":"2019-09-17T22:17:13.381Z","kind":"exercise"},{"id":1578,"title":null,"prerequisites":null,"position":21,"instructions":"Change the code to output `Hello world!`.\n","solution_code":"a = \"Hello\"\nb = \"world\"\nprint(a + \" \" + b + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"world\"\nprint(a + b + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a+\"\"+b+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:44:05.030Z","updated_at":"2019-09-18T13:45:33.794Z","kind":"exercise"},{"id":1513,"title":null,"prerequisites":null,"position":6,"instructions":"Add code to line 2 so the following is output:\n```\nWindows\nMac Linux\n```\n","solution_code":"print(\"Windows\")\nprint(\"Mac Linux\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"Windows\")\nprint(\"Mac\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Windows\\nMac Linux\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"Windows\")print(\"MacLinux\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:17:25.916Z","updated_at":"2019-09-17T22:18:56.057Z","kind":"exercise"},{"id":1580,"title":null,"prerequisites":null,"position":23,"instructions":"Change the code to output `Hello world!`. You must use the variable `b` in line 3 and not a string literal.\n","solution_code":"a = \"Hello\"\nb = \"world\"\nprint(a + \" \" + b + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"world\"\nprint(a + \" \" + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(a+\"\"+b+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:46:11.845Z","updated_at":"2019-09-18T13:46:40.850Z","kind":"exercise"},{"id":1581,"title":null,"prerequisites":null,"position":24,"instructions":"Change the code to output `Hello \"world\"!`. Change only line 2.\n\nHint: you will need to add escaped quotes `\\\"` inside the string.\n","solution_code":"a = \"Hello\"\nb = \"\\\"world\\\"\"\nprint(a + \" \" + b + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"world\"\nprint(a + \" \" + b + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello \"world\"!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b=\"\\\\\"world\\\\\"\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a+\"\"+b+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:46:53.151Z","updated_at":"2019-09-18T13:48:16.575Z","kind":"exercise"},{"id":1582,"title":null,"prerequisites":null,"position":26,"instructions":"Change the code to output `hello WORLD!` using the `upper()` function. Change only line 2.\n","solution_code":"a = \"Hello\".lower()\nb = \"world\".upper()\nprint(a + \" \" + b + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\".lower()\nb = \"world\"\nprint(a + \" \" + b + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'hello WORLD!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b=\"world\".upper()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a+\"\"+b+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:48:25.814Z","updated_at":"2019-09-18T14:00:39.831Z","kind":"exercise"},{"id":1583,"title":null,"prerequisites":null,"position":25,"instructions":"Change the code to output `HELLO world!` using the `lower()` and `upper()` functions. Change only lines 1 and 2.\n","solution_code":"a = \"Hello\".upper()\nb = \"WoRlD\".lower()\nprint(a + \" \" + b + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"WoRlD\"\nprint(a + \" \" + b + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HELLO world!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b=\"WoRlD\".lower()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a+\"\"+b+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:50:08.171Z","updated_at":"2019-09-18T14:01:01.171Z","kind":"exercise"},{"id":1584,"title":null,"prerequisites":null,"position":27,"instructions":"Change the code to output `hello WORLD!` using the `upper()` function. Change only line 3.\n","solution_code":"a = \"Hello\"\nb = \"world\"\nprint(a.lower() + \" \" + b.upper() + \"!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"world\"\nprint(a.lower() + \" \" + b + \"!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'hello WORLD!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b=\"world\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a.lower()+\"\"+b.upper()+\"!\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T13:50:42.818Z","updated_at":"2019-09-18T13:58:08.636Z","kind":"exercise"},{"id":1586,"title":null,"prerequisites":null,"position":29,"instructions":"Change the code to output `HELLO WORLD!` using the `upper()` function. Change only line 4.\n\n","solution_code":"a = \"Hello\"\nb = \"WoRlD\"\nsentence = a + \" \" + b + \"!\"\nprint(sentence.upper())","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\"\nb = \"WoRlD\"\nsentence = a + \" \" + b + \"!\"\nprint(sentence)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HELLO WORLD!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('b=\"WoRlD\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(sentence.upper())'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:04:28.367Z","updated_at":"2019-09-18T14:05:57.850Z","kind":"exercise"},{"id":1589,"title":null,"prerequisites":null,"position":32,"instructions":"Change the code to print `Helloworld!` using the `strip()` function. Change only line 1 and do not change any string literals.\n","solution_code":"a = \"Hello\\n\"\nb = \"world!\"\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\\n\"\nb = \"world!\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Helloworld!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('a = \"Hello\\\\n\".strip()'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a + b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:16:48.170Z","updated_at":"2019-09-18T14:17:58.971Z","kind":"exercise"},{"id":1563,"title":null,"prerequisites":null,"position":7,"instructions":"Similar to how `\\n` adds a newline, the escape sequence `\\t` adds a tab character. Fix the bug in the code to output\n```\nA\t1\nB\t2\nC\t3\n```\n\nHint: `\\n` was accidentally inserted instead of `\\t` on the last line.","solution_code":"print(\"A\\t1\")\nprint(\"B\\t2\")\nprint(\"C\\t3\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"A\\t1\")\nprint(\"B\\t2\")\nprint(\"C\\n3\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'A\\t1\\nB\\t2\\nC\\t3\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"C\\\\t3\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:24:11.543Z","updated_at":"2019-09-17T22:29:29.643Z","kind":"exercise"},{"id":1565,"title":null,"prerequisites":null,"position":9,"instructions":"Write *one* `print()` statement that outputs the following:\n```\nA\t1\nB\t2\n```\n\nHeads up: use just one `print()` statement!\n\nHint: you will need to use both the `\\t` and `\\n` escape sequences.","solution_code":"print(\"A\\t1\\nB\\t2\")\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'A\\t1\\nB\\t2\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:30:38.734Z","updated_at":"2019-09-17T22:32:00.223Z","kind":"exercise"},{"id":1588,"title":null,"prerequisites":null,"position":31,"instructions":"Change the code to print\n```\nHello\nworld!\n```\n\nHint: remove the `strip()` function.","solution_code":"a = \"Hello\\n\"\nb = \"world!\"\nprint(a + b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"Hello\\n\".strip()\nb = \"world!\"\nprint(a + b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello\\nworld!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('a = \"Hello\\\\n\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(a + b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-18T14:14:38.835Z","updated_at":"2019-09-18T14:16:41.114Z","kind":"exercise"},{"id":1564,"title":null,"prerequisites":null,"position":8,"instructions":"Write two `print()` statements that output the following:\n```\nA\t1\nB\t2\n```\n\n","solution_code":"print(\"A\\t1\")\nprint(\"B\\t2\")\n\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'A\\t1\\nB\\t2\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(\"A\\\\t1\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:29:36.649Z","updated_at":"2019-09-17T22:30:34.475Z","kind":"exercise"},{"id":1566,"title":null,"prerequisites":null,"position":10,"instructions":"We can include double quotes in strings by escaping them with `\\\"`. Change the code to output\n```\n\"I am a slow walker, but I never walk back.\" - Abe Lincoln\n```\nHint: Add `Abe` to the string.","solution_code":"print(\"\\\"I am a slow walker, but I never walk back.\\\" - Abe Lincoln\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(\"\\\"I am a slow walker, but I never walk back.\\\" - Lincoln\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '\"I am a slow walker, but I never walk back.\" - Abe Lincoln\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\n#phanon_h_test_greater_than(code.find('print(\"A\\\\t1\\\\nB\\\\t2\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":109,"phanon_module_id":null,"created_at":"2019-09-17T22:32:12.430Z","updated_at":"2019-09-18T13:17:52.646Z","kind":"exercise"}]},{"id":200,"title":"7c (6) - for loops III - nested loops","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":12,"published":null,"created_at":"2019-10-03T20:49:37.674Z","updated_at":"2019-10-03T20:49:56.650Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":2574,"title":null,"prerequisites":null,"position":5,"instructions":"Change the code to output\n```\ni: 0\n  j: 0\n  j: 1\n  j: 2\ni: 1\n  j: 0\n  j: 1\n  j: 2\ndone!\n```\n\nHint: you will need to change two `print()` calls.","solution_code":"for i in range(2):\n    print(\"i: \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j: \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'i: 0\\n  j: 0\\n  j: 1\\n  j: 2\\ni: 1\\n  j: 0\\n  j: 1\\n  j: 2\\ndone!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j: \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:11:36.243Z","updated_at":"2019-10-04T15:13:59.305Z","kind":"exercise"},{"id":2573,"title":null,"prerequisites":null,"position":4,"instructions":"Change the code to output\n```\ni = 0\n  j: 0\n  j: 1\n  j: 2\ni = 1\n  j: 0\n  j: 1\n  j: 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j: \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'i = 0\\n  j: 0\\n  j: 1\\n  j: 2\\ni = 1\\n  j: 0\\n  j: 1\\n  j: 2\\ndone!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j: \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:07:25.289Z","updated_at":"2019-10-04T15:13:07.339Z","kind":"exercise"},{"id":2583,"title":null,"prerequisites":null,"position":14,"instructions":"Fix the bug to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n    for j in range(3):\n    print(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T16:08:52.391Z","updated_at":"2019-10-04T16:09:01.352Z","kind":"exercise"},{"id":2578,"title":null,"prerequisites":null,"position":9,"instructions":"Add inner and outer loops to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:18:22.530Z","updated_at":"2019-10-04T15:20:31.277Z","kind":"exercise"},{"id":2577,"title":null,"prerequisites":null,"position":8,"instructions":"Add an outer loop on lines 1 and 2 to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:17:41.533Z","updated_at":"2019-10-04T15:20:26.209Z","kind":"exercise"},{"id":2579,"title":null,"prerequisites":null,"position":10,"instructions":"Fix the bug to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n\nHint: line 4 is printing the wrong value.","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(i))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:19:12.256Z","updated_at":"2019-10-04T15:20:49.333Z","kind":"exercise"},{"id":2575,"title":null,"prerequisites":null,"position":6,"instructions":"Add a `print()` call to line 4 to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\t\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:14:02.993Z","updated_at":"2019-10-04T15:20:15.877Z","kind":"exercise"},{"id":2580,"title":null,"prerequisites":null,"position":11,"instructions":"Fix the bug to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n\nHint: the bug is one line 2","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(j))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:20:53.300Z","updated_at":"2019-10-04T15:21:16.268Z","kind":"exercise"},{"id":2582,"title":null,"prerequisites":null,"position":13,"instructions":"Fix the bug to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(j))\n    for j in range(3):\n        print(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:22:22.315Z","updated_at":"2019-10-04T15:22:42.943Z","kind":"exercise"},{"id":2576,"title":null,"prerequisites":null,"position":7,"instructions":"Add an inner loop on lines 3 and 4 to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\t\n\t\t\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:15:50.986Z","updated_at":"2019-10-04T15:20:20.658Z","kind":"exercise"},{"id":2584,"title":null,"prerequisites":null,"position":15,"instructions":"Fix the bugs (there are two) to output\n```\na = 0\n  b = 0\n  b = 1\n  b = 2\na = 1\n  b = 0\n  b = 1\n  b = 2\ndone!\n```\n","solution_code":"for a in range(2):\n    print(\"a = \" + str(a))\n    for b in range(3):\n    \tprint(\"  b = \" + str(b))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor a in range(2):\n    print(\"a = \" + str(b))\n    for b in range(3):\n    print(\"  b = \" + str(b))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''a = 0\n  b = 0\n  b = 1\n  b = 2\na = 1\n  b = 0\n  b = 1\n  b = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  b = \" + str(b))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T16:09:09.381Z","updated_at":"2019-10-04T16:11:31.447Z","kind":"exercise"},{"id":2581,"title":null,"prerequisites":null,"position":12,"instructions":"Fix the bug to output\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n\nHint: indentation is wrong","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\nfor j in range(3):\n\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:21:21.807Z","updated_at":"2019-10-04T15:22:13.688Z","kind":"exercise"},{"id":2585,"title":null,"prerequisites":null,"position":16,"instructions":"Change the code to output\n```\na = 0\n  b = 0\n  b = 1\na = 1\n  b = 0\n  b = 1\ndone!\n```\n","solution_code":"for a in range(2):\n    print(\"a = \" + str(a))\n    for b in range(2):\n    \tprint(\"  b = \" + str(b))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nfor a in range(2):\n    print(\"a = \" + str(a))\n    for b in range(3):\n    \tprint(\"  b = \" + str(b))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''a = 0\n  b = 0\n  b = 1\na = 1\n  b = 0\n  b = 1\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  b = \" + str(b))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T16:11:43.799Z","updated_at":"2019-10-04T16:12:21.049Z","kind":"exercise"},{"id":2587,"title":null,"prerequisites":null,"position":18,"instructions":"Write a nested loop to output\n```\ni = 0\n  j = 0\n  j = 1\ni = 1\n  j = 0\n  j = 1\ni = 2\n  j = 0\n  j = 1\ndone!\n```\n","solution_code":"for i in range(3):\n    print(\"i = \" + str(i))\n    for j in range(2):\n    \tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''i = 0\n  j = 0\n  j = 1\ni = 1\n  j = 0\n  j = 1\ni = 2\n  j = 0\n  j = 1\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  j = \" + str(j))',\n     'print(\"  i = \" + str(i))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T16:12:49.894Z","updated_at":"2019-10-04T16:13:48.453Z","kind":"exercise"},{"id":2586,"title":null,"prerequisites":null,"position":17,"instructions":"Write a nested loop to output\n```\na = 0\n  b = 0\n  b = 1\na = 1\n  b = 0\n  b = 1\ndone!\n```\n","solution_code":"for a in range(2):\n    print(\"a = \" + str(a))\n    for b in range(2):\n    \tprint(\"  b = \" + str(b))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '''a = 0\n  b = 0\n  b = 1\na = 1\n  b = 0\n  b = 1\ndone!\\n''', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n# Add code snippets here\nc = ['print(\"  b = \" + str(b))'\n    ]\n\nc = [''.join(s.split()) for s in c]\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nfor t in c:\n\tphanon_h_test(code.find(t) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T16:12:28.518Z","updated_at":"2019-10-04T16:12:43.401Z","kind":"exercise"},{"id":2569,"title":null,"prerequisites":null,"position":0,"instructions":"This is a nested loop. Change the code so that it outputs\n```\ni = 0\n  j = 0\n  j = 1\ni = 1\n  j = 0\n  j = 1\ndone!\n```\n\nHint: `i` needs to count from 0 to 1 (inclusive), so you need to change the number in the first \ncall to `range()`","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(2):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n    print(\"i = \" + str(i))\n\tfor j in range(2):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'i = 0\\n  j = 0\\n  j = 1\\ni = 1\\n  j = 0\\n  j = 1\\ndone!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\nc = ''.join('for i in range(2):'.split())\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test(code.find(c) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-03T20:50:03.120Z","updated_at":"2019-10-03T21:00:44.980Z","kind":"exercise"},{"id":2571,"title":null,"prerequisites":null,"position":2,"instructions":"In a nested loop there is an \"outer\" loop and an \"inner\" loop. `i` is counted\nin the outer loop and `j` is the inner loop.\nChange the code so that it outputs\n```\ni = 0\n  j = 0\n  j = 1\n  j = 2\ni = 1\n  j = 0\n  j = 1\n  j = 2\ndone!\n```\n","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(3):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'i = 0\\n  j = 0\\n  j = 1\\n  j = 2\\ni = 1\\n  j = 0\\n  j = 1\\n  j = 2\\ndone!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\nc1 = ''.join('for i in range(2):'.split())\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test(code.find(c1) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-03T21:04:49.698Z","updated_at":"2019-10-04T15:04:53.647Z","kind":"exercise"},{"id":2570,"title":null,"prerequisites":null,"position":1,"instructions":"Change the code so that it outputs\n```\ni = 0\n  j = 0\n  j = 1\ni = 1\n  j = 0\n  j = 1\ni = 2\n  j = 0\n  j = 1\ndone!\n```\n\nHint: `i` needs to count from 0 to 2 (inclusive).","solution_code":"for i in range(3):\n    print(\"i = \" + str(i))\n\tfor j in range(2):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(2):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'i = 0\\n  j = 0\\n  j = 1\\ni = 1\\n  j = 0\\n  j = 1\\ni = 2\\n  j = 0\\n  j = 1\\ndone!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\nc1 = ''.join('for i in range(3):'.split())\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test(code.find(c1) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-03T21:00:53.562Z","updated_at":"2019-10-03T21:04:57.194Z","kind":"exercise"},{"id":2572,"title":null,"prerequisites":null,"position":3,"instructions":"In the inner loop, two spaces precede the `j = [number]` output. Change\nthe code to output three spaces before the `j = [number]`. Your output\nshould be\n```\ni = 0\n   j = 0\n   j = 1\n   j = 2\ni = 1\n   j = 0\n   j = 1\n   j = 2\ndone!\n```\n\nHint: in the second `print()` call, add an additional space before the `j`.","solution_code":"for i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"   j = \" + str(j))\nprint(\"done!\")\n","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(2):\n    print(\"i = \" + str(i))\n\tfor j in range(3):\n\t\tprint(\"  j = \" + str(j))\nprint(\"done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'i = 0\\n   j = 0\\n   j = 1\\n   j = 2\\ni = 1\\n   j = 0\\n   j = 1\\n   j = 2\\ndone!\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\nc1 = ''.join('for i in range(2):'.split())\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test(code.find(c1) > -1)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":200,"phanon_module_id":null,"created_at":"2019-10-04T15:03:53.424Z","updated_at":"2019-10-04T15:12:30.141Z","kind":"exercise"}]},{"id":98,"title":"2c (1) - arithmetic operators III - +=, etc","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":5,"published":null,"created_at":"2019-09-11T02:16:15.363Z","updated_at":"2019-09-11T02:48:04.203Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1380,"title":null,"prerequisites":null,"position":14,"instructions":"Using the `*=` and `//=` operators, fill in lines 3, 5, and 7 to output\n```\n18\n3\n21\n42\n```\n\nHeads up: be sure to use `//=` and *not* `/=`.","solution_code":"x = 18\nprint(x)\nx //= 6\nprint(x)\nx *= 7\nprint(x)\nx *= 2\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 18\nprint(x)\n\nprint(x)\n\nprint(x)\n\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1832142', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 42)\nphanon_h_test_greater_than(code.find('x=18'), -1,)\nphanon_h_test_greater_than(code.find('x//=6'), -1,)\nphanon_h_test_greater_than(code.find('x*=7'), -1,)\nphanon_h_test_greater_than(code.find('x*=2'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:36:28.260Z","updated_at":"2019-09-11T02:44:50.732Z","kind":"exercise"},{"id":1379,"title":null,"prerequisites":null,"position":13,"instructions":"`*=` and `//=` are similar to `+=`. (Remember that `//` refers to integer division.) Change the numbers on lines 3 and 5 to output\n```\n4\n12\n3\n```\n","solution_code":"x = 4\nprint(x)\nx *= 3\nprint(x)\nx //= 4\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 4\nprint(x)\nx *= 4\nprint(x)\nx //= 2\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4123', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 3)\nphanon_h_test_greater_than(code.find('x=4'), -1,)\nphanon_h_test_greater_than(code.find('x*=3'), -1,)\nphanon_h_test_greater_than(code.find('x//=4'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:35:19.481Z","updated_at":"2019-09-11T02:44:57.918Z","kind":"exercise"},{"id":1378,"title":null,"prerequisites":null,"position":12,"instructions":"Using the `+=` and `-=` operators, fill in lines 3, 5, and 7 to output\n```\n4\n8\n6\n3\n```\n\nDo not use any negative numbers.","solution_code":"x = 4\nprint(x)\nx += 4\nprint(x)\nx -= 2\nprint(x)\nx -= 3\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 4\nprint(x)\n\nprint(x)\n\nprint(x)\n\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '4863', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 3)\nphanon_h_test_greater_than(code.find('x=4'), -1,)\nphanon_h_test_greater_than(code.find('x+=4'), -1,)\nphanon_h_test_greater_than(code.find('x-=2'), -1,)\nphanon_h_test_greater_than(code.find('x-=3'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:33:12.750Z","updated_at":"2019-09-11T02:45:08.812Z","kind":"exercise"},{"id":1367,"title":null,"prerequisites":null,"position":1,"instructions":"Change line 1 to output\n```\n4\n6\n```","solution_code":"a = 4\nprint(a)\na += 2\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\na += 2\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '46', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 6)\nphanon_h_test_greater_than(code.find('a+=2'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:19:09.091Z","updated_at":"2019-09-11T02:21:10.751Z","kind":"exercise"},{"id":1366,"title":null,"prerequisites":null,"position":0,"instructions":"The `+=` operator adds a number to a variable. Change line 1 to output\n```\n4\n5\n```","solution_code":"a = 4\nprint(a)\na += 1\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\na += 1\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '45', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\nphanon_h_test_greater_than(code.find('a+=1'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:17:00.484Z","updated_at":"2019-09-11T02:19:58.741Z","kind":"exercise"},{"id":1368,"title":null,"prerequisites":null,"position":2,"instructions":"Change line 1 to output\n```\n18\n20\n```","solution_code":"a = 18\nprint(a)\na += 2\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\na += 2\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '1820', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 20)\nphanon_h_test_greater_than(code.find('a+=2'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:21:00.371Z","updated_at":"2019-09-11T02:21:37.053Z","kind":"exercise"},{"id":1369,"title":null,"prerequisites":null,"position":3,"instructions":"Change the number on line 3 to output\n```\n3\n4\n```\n\nDo not change line 1. Change only the number on line 3 -- don't change the operator.","solution_code":"a = 3\nprint(a)\na += 1\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\na += 2\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '34', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 4)\nphanon_h_test_greater_than(code.find('a+=1'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:21:41.248Z","updated_at":"2019-09-11T02:23:12.759Z","kind":"exercise"},{"id":1373,"title":null,"prerequisites":null,"position":7,"instructions":"Use the `+=` operator on line 3 to reassign `x` to output\n```\n3\n13\n```\n\nDo not change line 1.","solution_code":"x = 3\nprint(x)\nx += 10\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 3\nprint(x)\n\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '313', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 13)\nphanon_h_test_greater_than(code.find('x+=10'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:26:16.397Z","updated_at":"2019-09-11T02:27:02.400Z","kind":"exercise"},{"id":1370,"title":null,"prerequisites":null,"position":4,"instructions":"Change the number on line 3 to output\n```\n3\n7\n```\n\nDo not change line 1. Change only the number on line 3 -- don't change the operator.","solution_code":"a = 3\nprint(a)\na += 4\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\na += 2\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '37', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 7)\nphanon_h_test_greater_than(code.find('a+=4'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:23:02.424Z","updated_at":"2019-09-11T02:23:41.232Z","kind":"exercise"},{"id":1377,"title":null,"prerequisites":null,"position":11,"instructions":"Change the number on line 3 to output\n```\n4\n1\n```","solution_code":"x = 4\nprint(x)\nx -= 3\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 4\nprint(x)\nx -= 2\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '41', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 1)\nphanon_h_test_greater_than(code.find('x=4'), -1,)\nphanon_h_test_greater_than(code.find('x-=3'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:31:59.715Z","updated_at":"2019-09-11T02:41:28.197Z","kind":"exercise"},{"id":1371,"title":null,"prerequisites":null,"position":5,"instructions":"Use the `+=` operator on line 3 to reassign `a` to output\n```\n3\n5\n```\n\nDo not change line 1.","solution_code":"a = 3\nprint(a)\na += 2\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\n\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '35', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\nphanon_h_test_greater_than(code.find('a+=2'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:24:00.383Z","updated_at":"2019-09-11T02:25:38.689Z","kind":"exercise"},{"id":1374,"title":null,"prerequisites":null,"position":8,"instructions":"Use the `+=` operator on lines 3 and 5 to reassign `x` to output\n```\n3\n5\n9\n```","solution_code":"x = 3\nprint(x)\nx += 2\nprint(x)\nx += 4\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 3\nprint(x)\n\nprint(x)\n\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '359', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 9)\nphanon_h_test_greater_than(code.find('x+=2'), -1,)\nphanon_h_test_greater_than(code.find('x+=4'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:27:16.345Z","updated_at":"2019-09-11T02:29:01.104Z","kind":"exercise"},{"id":1372,"title":null,"prerequisites":null,"position":6,"instructions":"Use the `+=` operator on line 3 to reassign `a` to output\n```\n3\n10\n```\n\nDo not change line 1.","solution_code":"a = 3\nprint(a)\na += 7\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\n\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '310', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 10)\nphanon_h_test_greater_than(code.find('a+=7'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:25:42.100Z","updated_at":"2019-09-11T02:26:13.205Z","kind":"exercise"},{"id":1375,"title":null,"prerequisites":null,"position":9,"instructions":"Assign `x` to a value on line 1 to output\n```\n1\n3\n7\n```","solution_code":"x = 1\nprint(x)\nx += 2\nprint(x)\nx += 4\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\nprint(x)\nx += 2\nprint(x)\nx += 4\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '137', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 7)\nphanon_h_test_greater_than(code.find('x=1'), -1,)\nphanon_h_test_greater_than(code.find('x+=2'), -1,)\nphanon_h_test_greater_than(code.find('x+=4'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:29:15.429Z","updated_at":"2019-09-11T02:30:06.147Z","kind":"exercise"},{"id":1376,"title":null,"prerequisites":null,"position":10,"instructions":"`-=` is kind of like `+=`. Change the number on line 3 to output\n```\n4\n3\n```","solution_code":"x = 4\nprint(x)\nx -= 1\nprint(x)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nx = 4\nprint(x)\nx -= 2\nprint(x)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test(output == '43', 'Output is correct', 'Output is not correct')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(x, 3)\nphanon_h_test_greater_than(code.find('x=4'), -1,)\nphanon_h_test_greater_than(code.find('x-=1'), -1,)\n#phanon_h_test_greater_than(code.find('print(b)'), -1,)\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":98,"phanon_module_id":null,"created_at":"2019-09-11T02:30:25.358Z","updated_at":"2019-09-11T02:41:19.738Z","kind":"exercise"}]},{"id":53,"title":"7a (6) - for loops I","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":10,"published":null,"created_at":"2019-08-29T20:51:58.929Z","updated_at":"2019-10-02T15:34:04.125Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":679,"title":null,"prerequisites":null,"position":2,"instructions":"Change the code in the `for` loop so it outputs\n\n```\n0\n1\n2\n3\n4\n5\n6\n7\n```\n","solution_code":"for i in range(0, 8):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(0, 3):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(0,8)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(i)') > -1, \"print is correct\", \"print is incorrect\")\nphanon_test(output == '01234567', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T20:55:13.925Z","updated_at":"2019-08-29T20:55:54.771Z","kind":"exercise"},{"id":677,"title":null,"prerequisites":null,"position":0,"instructions":"Run the code. Change it so that it outputs\n\n```\n0\n1\n2\n3\n```\n\nHint: you will change the 3 to a 4.","solution_code":"","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(0, 3):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(0,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(i)') > -1, \"print is correct\", \"print is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T20:52:03.517Z","updated_at":"2019-08-29T20:53:46.843Z","kind":"exercise"},{"id":753,"title":null,"prerequisites":null,"position":17,"instructions":"Write a `for` loop that outputs\n\n```\n4\n5\n6\n7\n8\n```\n","solution_code":"for i in range(4,9):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4,9)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '45678', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:24:40.556Z","updated_at":"2019-08-29T21:26:50.466Z","kind":"exercise"},{"id":678,"title":null,"prerequisites":null,"position":1,"instructions":"This code has a `for` loop. It runs the indented code once for each number returned by `range()`. Change the code so that it outputs\n\n```\n0\n1\n2\n3\n4\n```\n","solution_code":"for i in range(0, 5):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(0, 3):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(0,5)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(i)') > -1, \"print is correct\", \"print is incorrect\")\nphanon_test(output == '01234', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T20:54:08.342Z","updated_at":"2019-08-29T20:55:10.432Z","kind":"exercise"},{"id":759,"title":null,"prerequisites":null,"position":23,"instructions":"The counter variable is `count`. Put `count` in the `print()` call to output\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for count in range(4):\n\tprint(count)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor count in range(4):\n\tprint()\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('forcountinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:31:43.503Z","updated_at":"2019-08-29T21:33:14.599Z","kind":"exercise"},{"id":680,"title":null,"prerequisites":null,"position":3,"instructions":"Change the code in the `for` loop so it outputs\n\n```\n1\n2\n3\n4\n5\n6\n7\n```\n\nHint: you'll change the `0` in the `range()` call.","solution_code":"for i in range(1, 8):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(0, 8):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(1,8)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(i)') > -1, \"print is correct\", \"print is incorrect\")\nphanon_test(output == '1234567', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T20:55:57.351Z","updated_at":"2019-08-29T20:57:05.999Z","kind":"exercise"},{"id":682,"title":null,"prerequisites":null,"position":5,"instructions":"Add an argument to the `range()` call to output\n\n```\n0\n1\n2\n3\n```\n\nYou may add one or two arguments to the `range()` call.","solution_code":"for i in range(4):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range():\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1 or code.find('range(0,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T20:57:57.038Z","updated_at":"2019-08-29T21:01:37.386Z","kind":"exercise"},{"id":681,"title":null,"prerequisites":null,"position":4,"instructions":"Change the code so it outputs\n\n```\n3\n4\n5\n6\n7\n8\n9\n10\n```\n","solution_code":"for i in range(3, 11):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(0, 8):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(3,11)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(i)') > -1, \"print is correct\", \"print is incorrect\")\nphanon_test(output == '345678910', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T20:57:06.585Z","updated_at":"2019-08-29T20:58:47.816Z","kind":"exercise"},{"id":752,"title":null,"prerequisites":null,"position":16,"instructions":"Write a `for` loop that outputs\n\n```\n11\n12\n13\n14\n```\n","solution_code":"for i in range(11,15):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(11,15)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '11121314', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:24:09.490Z","updated_at":"2019-08-29T21:26:45.515Z","kind":"exercise"},{"id":754,"title":null,"prerequisites":null,"position":18,"instructions":"Write a `for` loop that outputs\n\n```\n0\n1\n2\n3\n```\n\nYou may use only ***one*** argument to `range()`.","solution_code":"for i in range(4):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1 or code.find('foriinrange(0,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:25:31.953Z","updated_at":"2019-09-03T20:08:17.157Z","kind":"exercise"},{"id":755,"title":null,"prerequisites":null,"position":19,"instructions":"Write a `for` loop that outputs\n\n```\n0\n1\n2\n3\n4\n5\n6\n7\n```\n\nYou may use only ***one*** argument to `range()`.","solution_code":"for i in range(8):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(8)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '01234567', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:27:13.776Z","updated_at":"2019-08-29T21:27:40.504Z","kind":"exercise"},{"id":756,"title":null,"prerequisites":null,"position":20,"instructions":"Write a `for` loop that outputs\n\n```\n2\n3\n4\n```\n\nYour call to `range()` will have two arguments.","solution_code":"for i in range(2,5):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(2,5)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '234', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:27:36.063Z","updated_at":"2019-08-29T21:28:54.139Z","kind":"exercise"},{"id":757,"title":null,"prerequisites":null,"position":21,"instructions":"Fix the bug so that the following is output:\n\n```\n0\n1\n2\n3\n```\n\nChange only line 2.\n\nHint: `j` was accidentally put in the `print()` call instead of `i`. Change it to `i`.","solution_code":"for i in range(4):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\tprint(j)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:28:49.787Z","updated_at":"2019-08-29T21:31:13.008Z","kind":"exercise"},{"id":758,"title":null,"prerequisites":null,"position":22,"instructions":"We don't have to use `i` as the counter variable. Change the `i` in line 1 to `j`.\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for i in range(4):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\tprint(j)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('forjinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:30:18.803Z","updated_at":"2019-08-29T21:31:27.979Z","kind":"exercise"},{"id":760,"title":null,"prerequisites":null,"position":24,"instructions":"Fix the bug to output\n\n```\n0\n1\n2\n3\n```\n\nChange only line 2. ","solution_code":"for count in range(4):\n\tprint(count)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor count in range(4):\n\tprint(j)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('forcountinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:32:34.661Z","updated_at":"2019-08-29T21:33:23.897Z","kind":"exercise"},{"id":717,"title":null,"prerequisites":null,"position":6,"instructions":"Add a call to `range()` to output\n\n```\n0\n1\n2\n3\n```\n\nYou may add one or two arguments to the `range()` call.","solution_code":"for i in range(4):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in :\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1 or code.find('range(0,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:00:41.877Z","updated_at":"2019-08-29T21:01:30.166Z","kind":"exercise"},{"id":718,"title":null,"prerequisites":null,"position":7,"instructions":"Add the `for` keyword on line 1 to output\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for i in range(4):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\ni in range(4):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('range(4)') > -1 or code.find('range(0,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:01:24.430Z","updated_at":"2019-08-29T21:02:20.380Z","kind":"exercise"},{"id":720,"title":null,"prerequisites":null,"position":9,"instructions":"Write the first line of a `for` loop to output\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for i in range(4):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1 or code.find('foriinrange(0,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:03:31.404Z","updated_at":"2019-09-03T20:06:32.013Z","kind":"exercise"},{"id":719,"title":null,"prerequisites":null,"position":8,"instructions":"Add the variable `i` in between `for` and `in` to output\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for i in range(4):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor in range(4):\n    print(i)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:02:22.214Z","updated_at":"2019-08-29T21:03:22.680Z","kind":"exercise"},{"id":721,"title":null,"prerequisites":null,"position":10,"instructions":"Put the variable `i` in the `print()` statement to output\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for i in range(4):\n    print(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n    print()\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:04:06.704Z","updated_at":"2019-08-29T21:04:40.738Z","kind":"exercise"},{"id":726,"title":null,"prerequisites":null,"position":15,"instructions":"Write a `for` loop that outputs\n\n```\n1\n2\n3\n```\n\nHint: you will have two arguments in the `range()` call.","solution_code":"for i in range(1,4):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(1,4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:09:17.643Z","updated_at":"2019-08-29T21:10:19.614Z","kind":"exercise"},{"id":722,"title":null,"prerequisites":null,"position":11,"instructions":"Add a call to `print()` on line 2 to output\n\n```\n0\n1\n2\n3\n```\n\nHint: be sure to indent the line with `print()`.\n\nHint: see previous exercise if you get stuck.","solution_code":"for i in range(4):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\nfor i in range(4):\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:04:44.973Z","updated_at":"2019-08-29T21:06:57.296Z","kind":"exercise"},{"id":723,"title":null,"prerequisites":null,"position":12,"instructions":"Write a `for` loop that outputs\n\n```\n0\n1\n2\n3\n```\n","solution_code":"for i in range(4):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(4)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '0123', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:06:59.626Z","updated_at":"2019-08-29T21:07:34.423Z","kind":"exercise"},{"id":724,"title":null,"prerequisites":null,"position":14,"instructions":"Write a `for` loop that outputs\n\n```\n0\n1\n2\n```\n","solution_code":"for i in range(3):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(3)') > -1 or code.find('foriinrange(0,6)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '012', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:07:39.004Z","updated_at":"2019-08-29T21:09:13.289Z","kind":"exercise"},{"id":725,"title":null,"prerequisites":null,"position":13,"instructions":"Write a `for` loop that outputs\n\n```\n0\n1\n2\n3\n4\n5\n```\n","solution_code":"for i in range(6):\n\tprint(i)","solution_tests_passing":true,"test_code":"\n### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(code.find('foriinrange(6)') > -1 or code.find('foriinrange(0,6)') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(output == '012345', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":53,"phanon_module_id":null,"created_at":"2019-08-29T21:08:17.590Z","updated_at":"2019-08-29T21:09:04.712Z","kind":"exercise"}]},{"id":139,"title":"16 (13) - boolean expressions II - not, and, or","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":21,"published":null,"created_at":"2019-09-25T10:48:55.414Z","updated_at":"2019-10-03T20:49:44.215Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":2033,"title":null,"prerequisites":null,"position":2,"instructions":"Change the conditional so that `Hello` is printed if `a` is 3 or if `b` is 5.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a == 3 or b == 5:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif True:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a == 3 or b == 5:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T10:55:54.007Z","updated_at":"2019-09-25T10:56:19.245Z","kind":"exercise"},{"id":2038,"title":null,"prerequisites":null,"position":7,"instructions":"Write an if statement that prints `Hello` if `a` is greater than `b - 2`\nor if `b` is less than 2.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a > b - 2 or b < 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a > b - 2 or b < 2:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:01:25.841Z","updated_at":"2019-09-25T12:28:48.393Z","kind":"exercise"},{"id":2031,"title":null,"prerequisites":null,"position":0,"instructions":"We can combine conditionals with the `or` operator. Change the conditional\nso that `Hello` is printed if `a` is 4 or if `b` is 4. Your program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a == 4 or b == 4:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif a == 4 or b == 5:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a == 4 or b == 4:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T10:49:04.894Z","updated_at":"2019-09-25T10:54:15.752Z","kind":"exercise"},{"id":2034,"title":null,"prerequisites":null,"position":3,"instructions":"Change the conditional so that `Hello` is printed if `a` is 4 or if `b` is 4.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a == 4 or b == 4:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif False:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a == 4 or b == 4:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T10:56:45.113Z","updated_at":"2019-09-25T10:58:47.650Z","kind":"exercise"},{"id":2053,"title":null,"prerequisites":null,"position":9,"instructions":"Write an if statement that prints `Hello` if `a` is less than 4 or if `a` is greater than 5\nYour program should output\n```\nHello\n```\n","solution_code":"a = 3\nif a < 4 or a > 5:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a < 4 or a > 5:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T12:31:25.905Z","updated_at":"2019-09-25T12:32:22.706Z","kind":"exercise"},{"id":2042,"title":null,"prerequisites":null,"position":11,"instructions":"Change the\nconditional so that `Hello` is printed if `a` is 3 and if `b` is 4.\nYour program should output\n```\nHello\n```\n","solution_code":"a = 3\nb = 4\nif a == 3 and b == 4:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif False:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a == 3 and b == 4:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:11:03.333Z","updated_at":"2019-09-25T12:31:25.831Z","kind":"exercise"},{"id":2036,"title":null,"prerequisites":null,"position":5,"instructions":"Change the conditional so that `Hello` is printed if `a` is less than\n`b - 1` or if `b` is greater than 2.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a < b - 1 or b > 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif False:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a < b - 1 or b > 2:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T10:59:59.032Z","updated_at":"2019-09-25T10:59:59.041Z","kind":"exercise"},{"id":2035,"title":null,"prerequisites":null,"position":4,"instructions":"Change the conditional so that `Hello` is printed if `a` is less than\n`b - 1` or if `b` is greater than 2.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a < b - 1 or b > 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif a < b - 1 or b == 2:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a < b - 1 or b > 2:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T10:57:28.151Z","updated_at":"2019-09-25T11:00:12.124Z","kind":"exercise"},{"id":2037,"title":null,"prerequisites":null,"position":6,"instructions":"Write an if statement that prints `Hello` if `a` is less than `b - 1`\nor if `b` is greater than 2.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a < b - 1 or b > 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a < b - 1 or b > 2:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:00:45.645Z","updated_at":"2019-09-25T11:01:23.438Z","kind":"exercise"},{"id":2039,"title":null,"prerequisites":null,"position":8,"instructions":"Write an if statement that prints `Hello` if `a` is *greater than or equal\nto* `b - 2` or if `b` is *less than or equal* to 0.\nYour program should output\n```\nHello\n```\n\nHint: recall that the operator for *less than or equal to* is `<=`.","solution_code":"a = 3\nb = 4\nif a >= b - 2 or b <= 0:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a >= b - 2 or b <= 0:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:03:35.234Z","updated_at":"2019-09-25T11:05:20.243Z","kind":"exercise"},{"id":2041,"title":null,"prerequisites":null,"position":12,"instructions":"Change the conditional so that `Hello` is printed if `a` is less than or\nequal to `b - 1` and if `b` is greater than 2. \nYour program should output\n```\nHello\n```\n","solution_code":"a = 3\nb = 4\nif a <= b - 1 and b > 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif False:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a <= b - 1 and b > 2:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:09:03.590Z","updated_at":"2019-09-25T12:31:25.842Z","kind":"exercise"},{"id":2040,"title":null,"prerequisites":null,"position":10,"instructions":"We can also combine conditionals with the `and` operator. Change the\nconditional so that `Hello` is printed if `a` is 3 and if `b` is 4.\nYour program should output\n```\nHello\n```\n","solution_code":"a = 3\nb = 4\nif a == 3 and b == 4:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif a == 4 and b == 5:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a == 3 and b == 4:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:05:51.317Z","updated_at":"2019-09-25T12:31:25.855Z","kind":"exercise"},{"id":2043,"title":null,"prerequisites":null,"position":13,"instructions":"Write an if statement that prints `Hello` if `a` is greater than 2 and\nif `b` is greater than `a`.\nYour program should output\n```\nHello\n```\n","solution_code":"a = 3\nb = 4\nif a > 2 and b > a:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a > 2 and b > a:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:11:17.863Z","updated_at":"2019-09-25T12:31:25.864Z","kind":"exercise"},{"id":2047,"title":null,"prerequisites":null,"position":15,"instructions":"Replace the `x` with the `not` operator. Your program should output\n```\nDone!\n```\n","solution_code":"completed = True\nif not completed:\n    print(\"Not yet done\")\nelse:\n    print(\"Done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncompleted = True\nif x completed:\n    print(\"Not yet done\")\nelse:\n    print(\"Done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if not completed:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:53:28.850Z","updated_at":"2019-09-25T12:31:25.873Z","kind":"exercise"},{"id":2048,"title":null,"prerequisites":null,"position":16,"instructions":"Replace the `x` with the `not` operator. Your program should output\n```\nGet busy!\n```\n","solution_code":"completed = False\nif not completed:\n    print(\"Get busy!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncompleted = False\nif x completed:\n    print(\"Get busy!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Getbusy!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if not completed:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:54:43.745Z","updated_at":"2019-09-25T12:31:25.882Z","kind":"exercise"},{"id":2049,"title":null,"prerequisites":null,"position":17,"instructions":"Output `Get busy!` if the `completed` variable is `False`.\nDon't output anything otherwise. Use the `not` logical operator to determine\nif `completed` is `False`, similar to the previous exercise.\nYour program should output\n```\nGet busy!\n```\n","solution_code":"completed = False\nif not completed:\n    print(\"Get busy!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncompleted = False\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Getbusy!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if not completed:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:58:23.000Z","updated_at":"2019-09-25T12:34:27.106Z","kind":"exercise"},{"id":2032,"title":null,"prerequisites":null,"position":1,"instructions":"Change the conditional so that `Hello` is printed if `a` is 3 or if `b` is 5.\nYour program should output\n```\nHello\n```","solution_code":"a = 3\nb = 4\nif a == 3 or b == 5:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nif a == 4 or b == 5:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if a == 3 or b == 5:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T10:52:45.310Z","updated_at":"2019-09-25T10:55:52.503Z","kind":"exercise"},{"id":2045,"title":null,"prerequisites":null,"position":14,"instructions":"The `not` operator reverses a boolean value. Change line 1 so that `Done!` is output.\n","solution_code":"completed = True\nif not completed:\n    print(\"Not yet done\")\nelse:\n    print(\"Done!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncompleted = False\nif not completed:\n    print(\"Not yet done\")\nelse:\n    print(\"Done!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Done!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\nsoln = 'if not completed:'\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find(''.join(soln.split())) > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":139,"phanon_module_id":null,"created_at":"2019-09-25T11:41:08.438Z","updated_at":"2019-09-25T12:31:25.897Z","kind":"exercise"}]},{"id":129,"title":"14 (13) - conditionals II - if/else","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":19,"published":null,"created_at":"2019-09-23T12:37:16.693Z","updated_at":"2019-10-03T20:49:46.037Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1907,"title":null,"prerequisites":null,"position":8,"instructions":"Write code that outputs `bark!` followed by `ruff!` if the animal is a dog and outputs `meow!` otherwise. Your program should output\n```\nbark!\nruff!\n```\n\nHint: add an additional `print()` call in the `if` statement. Heads up: the new call to `print()` must be indented.","solution_code":"animal = \"dog\"\nif animal==\"dog\":\n    print(\"bark!\")\n    print(\"ruff!\")\nelse:\n    print(\"meow!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nanimal = \"dog\"\nif animal==\"dog\":\n    print(\"bark!\")\nelse:\n    print(\"meow!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'bark!ruff!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(animal, \"dog\")\n#phanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifanimal==\"dog\":print(\"bark!\")print(\"ruff!\")else:print(\"meow!\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T14:27:43.220Z","updated_at":"2019-09-23T14:32:44.137Z","kind":"exercise"},{"id":1908,"title":null,"prerequisites":null,"position":9,"instructions":"Fix the bug. The program should output\n```\nbark!\nruff!\n```\n","solution_code":"animal = \"dog\"\nif animal==\"dog\":\n    print(\"bark!\")\n    print(\"ruff!\")\nelse:\n    print(\"meow!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nanimal = \"dog\"\nif animal==\"dog\":\n    print(\"bark!\")\nprint(\"ruff!\")\nelse:\n    print(\"meow!\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'bark!ruff!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(animal, \"dog\")\n#phanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifanimal==\"dog\":print(\"bark!\")print(\"ruff!\")else:print(\"meow!\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T14:29:14.441Z","updated_at":"2019-09-23T14:32:44.156Z","kind":"exercise"},{"id":1909,"title":null,"prerequisites":null,"position":6,"instructions":"Write code that outputs `American` if `car` is equal to `Ford` and `Japanese` otherwise. Do not change line 1. Your program should output\n```\nJapanese\n```\n","solution_code":"car = \"Toyota\"\nif car == \"Ford\":\n    print(\"American\")\nelse:\n    print(\"Japanese\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncar = \"Toyota\"\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Japanese', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(car, \"Toyota\")\n#phanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifcar==\"Ford\":print(\"American\")else:print(\"Japanese\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T14:32:44.209Z","updated_at":"2019-09-23T14:32:44.236Z","kind":"exercise"},{"id":1905,"title":null,"prerequisites":null,"position":5,"instructions":"Change line 1 so that the program outputs\n```\nAmerican\n```\n","solution_code":"car = \"Ford\"\nif car == \"Ford\":\n    print(\"American\")\nelse:\n    print(\"Japanese\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ncar = \"Toyota\"\nif car == \"Ford\":\n    print(\"American\")\nelse:\n    print(\"Japanese\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'American', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(car, \"Ford\")\n#phanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('ifcar==\"Ford\":print(\"American\")else:print(\"Japanese\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T14:20:26.804Z","updated_at":"2019-09-23T14:33:32.995Z","kind":"exercise"},{"id":1899,"title":null,"prerequisites":null,"position":0,"instructions":"Change line 1 so the program outputs\n```\nGoodbye\nDone\n```\n\nChange only line 1.","solution_code":"a = 2\nif a == 3:\n    print(\"Hello\")\nelse:\n    print(\"Goodbye\")\nprint(\"Done\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 3:\n    print(\"Hello\")\nelse:\n    print(\"Goodbye\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'GoodbyeDone', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a != 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('print(\"Your') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T12:37:24.052Z","updated_at":"2019-09-23T12:40:16.959Z","kind":"exercise"},{"id":1901,"title":null,"prerequisites":null,"position":2,"instructions":"Write a program that prints `Hello` if `a` is equal to `3` and prints `Goodbye` otherwise. The program should print `Done` at the end no matter what. Your output should be\n```\nHello\nDone\n```\n\nHint: the statement that prints `Goodbye` should be in an `else` clause. See previous exercise if needed.","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\nelse:\n    print(\"Goodbye\")\nprint(\"Done\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloDone', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifa==3:print(\"Hello\")else:print(\"Goodbye\")print(\"Done\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T12:41:24.282Z","updated_at":"2019-09-23T12:47:59.104Z","kind":"exercise"},{"id":1900,"title":null,"prerequisites":null,"position":1,"instructions":"Change line 1 so the program outputs\n```\nHello\nDone\n```\n\nChange only line 1.","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\nelse:\n    print(\"Goodbye\")\nprint(\"Done\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nif a == 3:\n    print(\"Hello\")\nelse:\n    print(\"Goodbye\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloDone', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('print(\"Your') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T12:40:44.532Z","updated_at":"2019-09-23T12:47:59.097Z","kind":"exercise"},{"id":1902,"title":null,"prerequisites":null,"position":3,"instructions":"Write a program that prints `Hello` if `a` is equal to `3` and prints `Goodbye` otherwise. The program should print `Done` at the end no matter what. Your output should be\n```\nGoodbye\nDone\n```\n","solution_code":"a = 2\nif a == 3:\n    print(\"Hello\")\nelse:\n    print(\"Goodbye\")\nprint(\"Done\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'GoodbyeDone', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('a==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifa==3:print(\"Hello\")else:print(\"Goodbye\")print(\"Done\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T12:45:02.169Z","updated_at":"2019-09-23T14:31:19.955Z","kind":"exercise"},{"id":1904,"title":null,"prerequisites":null,"position":4,"instructions":"Write a program that, after it prints the score, prints `Good job!` if `score` is greater than `80` and prints `You can do better.` otherwise. The program should print `Done` at the end no matter what. Your output should be\n```\nYour score was 85\nGood job!\nDone\n```\n","solution_code":"score = 85\nprint(\"Your score was \" + str(score))\nif score > 80:\n    print(\"Good job!\")\nelse:\n    print(\"You can do better.\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nscore = 85\nprint(\"Your score was \" + str(score))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Yourscorewas85Goodjob!Done', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\n#phanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifscore>80:print(\"Goodjob!\")else:print(\"Youcandobetter.\")print(\"Done\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T12:48:04.593Z","updated_at":"2019-09-23T14:31:25.311Z","kind":"exercise"},{"id":1906,"title":null,"prerequisites":null,"position":7,"instructions":"Write code that outputs `bark!` if the animal is a dog and outputs `meow!` otherwise. Do not change line 1. Your program should output\n```\nbark!\n```\n","solution_code":"animal = \"dog\"\nif animal==\"dog\":\n    print(\"bark!\")\nelse:\n    print(\"meow!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nanimal = \"dog\"\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'bark!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(animal, \"dog\")\n#phanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('ifanimal==\"dog\":print(\"bark!\")else:print(\"meow!\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":129,"phanon_module_id":null,"created_at":"2019-09-23T14:24:11.373Z","updated_at":"2019-09-23T14:32:44.179Z","kind":"exercise"}]},{"id":128,"title":"13 (11) - conditionals I - if","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":18,"published":null,"created_at":"2019-09-23T11:20:44.519Z","updated_at":"2019-10-03T20:49:47.669Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1886,"title":null,"prerequisites":null,"position":18,"instructions":"Add a `print()` call so that the program outputs the following:\n```\nHello\nGoodbye\n```\n\nHeads up: be sure the second `print()` statement is indented the same as line 3.","solution_code":"a = 3\nif a > 2:\n    print(\"Hello\")\n    print(\"Goodbye\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a > 2:\n    print(\"Hello\")\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloGoodbye', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa>2:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:51:38.910Z","updated_at":"2019-09-23T11:52:14.856Z","kind":"exercise"},{"id":1887,"title":null,"prerequisites":null,"position":19,"instructions":"Fix the bug so that the program outputs the following:\n```\nHello\nGoodbye\n```\n\nHint: be sure the second `print()` statement is indented the same as line 3.","solution_code":"a = 3\nif a > 2:\n    print(\"Hello\")\n    print(\"Goodbye\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a > 2:\n    print(\"Hello\")\n   print(\"Goodbye\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloGoodbye', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa>2:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:52:26.460Z","updated_at":"2019-09-23T11:52:54.488Z","kind":"exercise"},{"id":1889,"title":null,"prerequisites":null,"position":22,"instructions":"Change the value of `a` on line 1 so that `Hello` is *not* printed. The program should output\n```\nDone\n```\n\nChange only line 1.","solution_code":"a = 2\nif a == 3:\n    print(\"Hello\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 3:\n    print(\"Hello\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Done', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a != 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:55:27.378Z","updated_at":"2019-09-23T11:56:37.966Z","kind":"exercise"},{"id":1892,"title":null,"prerequisites":null,"position":25,"instructions":"Fix the bug so that the program outputs\n```\nGoodbye\nDone\n```\n\nChange only line 5.","solution_code":"a = 2\nif a == 3:\n    print(\"Hello\")\nprint(\"Goodbye\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nif a == 3:\n    print(\"Hello\")\nprint(\"Goodbye\")\n\tprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'GoodbyeDone', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:59:35.106Z","updated_at":"2019-09-23T12:01:09.202Z","kind":"exercise"},{"id":1877,"title":null,"prerequisites":null,"position":9,"instructions":"Fix the bug on line 2 so that the code prints `Hello`.\n\nHint: a word is misspelled.\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nf a == 3:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:37:15.379Z","updated_at":"2019-09-23T11:46:50.316Z","kind":"exercise"},{"id":1882,"title":null,"prerequisites":null,"position":15,"instructions":"Write an `if` statement that prints `Hello` if `a` is less than `4`.\n","solution_code":"a = 3\nif a < 4:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa<4:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:39:49.432Z","updated_at":"2019-09-23T11:47:07.899Z","kind":"exercise"},{"id":1880,"title":null,"prerequisites":null,"position":12,"instructions":"Fix the bugs (there are two bugs) on line 2 so that the code prints `Hello`.\n\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a = 3\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:38:22.317Z","updated_at":"2019-09-23T11:46:58.164Z","kind":"exercise"},{"id":1878,"title":null,"prerequisites":null,"position":10,"instructions":"Fix the bug on line 2 so that the code prints `Hello`.\n\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nifa == 3:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:37:44.058Z","updated_at":"2019-09-23T11:46:52.982Z","kind":"exercise"},{"id":1871,"title":null,"prerequisites":null,"position":4,"instructions":"Change line 1 so that the code prints `Hello`. Change only line 1.\n","solution_code":"a = 6\nif a < 7:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 7\nif a < 7:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_less_than(a, 7)\nphanon_h_test_greater_than(code.find('a<7'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:29:07.690Z","updated_at":"2019-09-23T11:44:39.839Z","kind":"exercise"},{"id":1869,"title":null,"prerequisites":null,"position":2,"instructions":"Change line 1 so that the code prints `Hello`. Change only line 1.\n","solution_code":"a = 7\nif a == 7:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 7:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\nphanon_h_test_greater_than(code.find('a==7'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:26:02.004Z","updated_at":"2019-09-23T11:44:27.572Z","kind":"exercise"},{"id":1874,"title":null,"prerequisites":null,"position":7,"instructions":"Fix the bug on line 2 so that the code prints `Hello`.\n\nHint: line 2 is missing a colon at the end of the line.\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 3\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:34:16.259Z","updated_at":"2019-09-23T11:46:47.535Z","kind":"exercise"},{"id":1875,"title":null,"prerequisites":null,"position":14,"instructions":"On lines 2 and 3 write an `if` statement that prints `Hello` if `a` is equal to `3`.\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:35:46.813Z","updated_at":"2019-09-23T11:47:04.191Z","kind":"exercise"},{"id":1883,"title":null,"prerequisites":null,"position":16,"instructions":"Write an `if` statement that prints `Hello` if `a` is geater than `2`.\n","solution_code":"a = 3\nif a > 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa>2:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:42:41.370Z","updated_at":"2019-09-23T11:47:10.914Z","kind":"exercise"},{"id":1881,"title":null,"prerequisites":null,"position":13,"instructions":"Fix the bug on line 3 so that the code prints `Hello`.\n\nHint: line 3 must be indented\n\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 3:\nprint(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:39:10.198Z","updated_at":"2019-09-23T11:47:01.383Z","kind":"exercise"},{"id":1873,"title":null,"prerequisites":null,"position":6,"instructions":"Change line 2 so that the code prints `Hello` if a is greater than 2. Change only line 2.\n","solution_code":"a = 3\nif a > 2:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a > 3:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a>2'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:32:46.856Z","updated_at":"2019-09-23T11:45:04.547Z","kind":"exercise"},{"id":1872,"title":null,"prerequisites":null,"position":5,"instructions":"Change line 2 so that the code prints `Hello` if a is equal to 7. Change only line 2, and make sure it prints `Hello` *only if* `a` is equal to `7`.\n","solution_code":"a = 7\nif a == 7:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 7\nif False:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 7)\nphanon_h_test_greater_than(code.find('a==7'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:30:16.100Z","updated_at":"2019-09-23T11:44:49.586Z","kind":"exercise"},{"id":1867,"title":null,"prerequisites":null,"position":0,"instructions":"Change the conditional so that `Hello` is printed if `a` is equal to `3`.\n\nHint: change the `4` to a `3`.","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 4:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:20:50.888Z","updated_at":"2019-09-23T11:43:50.951Z","kind":"exercise"},{"id":1870,"title":null,"prerequisites":null,"position":3,"instructions":"Change line 1 so that the code *does not* print `Hello`. Change only line 1.\n","solution_code":"a = 6\nif a == 7:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 7\nif a == 7:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_greater_than(code.find('a==7'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:26:49.803Z","updated_at":"2019-09-23T11:44:24.396Z","kind":"exercise"},{"id":1868,"title":null,"prerequisites":null,"position":1,"instructions":"Change the value of `a` to `4` so that `Hello` is printed. Heads up: change only line 1.\n","solution_code":"a = 4\nif a == 4:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 4:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\nphanon_h_test_greater_than(code.find('a==4'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:23:48.965Z","updated_at":"2019-09-23T11:44:30.510Z","kind":"exercise"},{"id":1879,"title":null,"prerequisites":null,"position":11,"instructions":"Fix the bug on line 2 so that the code prints `Hello`.\n\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a == 3\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:38:06.990Z","updated_at":"2019-09-23T11:46:55.584Z","kind":"exercise"},{"id":1876,"title":null,"prerequisites":null,"position":8,"instructions":"Fix the bug on line 2 so that the code prints `Hello`.\n\nHint: line 2 is missing an equals sign.\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a = 3:\n    print(\"Hello\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Hello', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('a==3'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:36:36.966Z","updated_at":"2019-09-23T11:45:30.049Z","kind":"exercise"},{"id":1888,"title":null,"prerequisites":null,"position":21,"instructions":"Change line 2 so that `Hello` will be printed if `a` is equal to `3`. The program should output\n```\nHello\nDone\n```\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a > 3:\n    print(\"Hello\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloDone', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:53:36.645Z","updated_at":"2019-09-23T11:55:22.929Z","kind":"exercise"},{"id":1885,"title":null,"prerequisites":null,"position":17,"instructions":"Fill in the string literal in the second `print()` call so that the program outputs the following:\n```\nHello\nGoodbye\n```\n","solution_code":"a = 3\nif a > 2:\n    print(\"Hello\")\n    print(\"Goodbye\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a > 2:\n    print(\"Hello\")\n    print(\"\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloGoodbye', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa>2:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:50:07.596Z","updated_at":"2019-09-23T11:51:30.840Z","kind":"exercise"},{"id":1891,"title":null,"prerequisites":null,"position":24,"instructions":"Change line 5 so that the program outputs\n```\nDone\n```\n\nChange only line 5. Hint: you need to change indentation.","solution_code":"a = 2\nif a == 3:\n    print(\"Hello\")\n    print(\"Goodbye\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nif a == 3:\n    print(\"Hello\")\n    print(\"Goodbye\")\n\tprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Done', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:58:07.180Z","updated_at":"2019-09-23T11:59:33.392Z","kind":"exercise"},{"id":1890,"title":null,"prerequisites":null,"position":23,"instructions":"Change line 1 so that the program outputs\n```\nHello\nGoodbye\nDone\n```\n\nChange only line 1.","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n    print(\"Goodbye\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nif a == 3:\n    print(\"Hello\")\n    print(\"Goodbye\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloGoodbyeDone', \"Output is correct\", \"Output is incorrect\")\nphanon_test(a == 3, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:56:46.723Z","updated_at":"2019-09-23T11:57:57.503Z","kind":"exercise"},{"id":1893,"title":null,"prerequisites":null,"position":26,"instructions":"Fix the bug so that the program outputs\n```\nDone\n```\n\nChange only line 4.","solution_code":"a = 2\nif a == 3:\n    print(\"Hello\")\n\tprint(\"Goodbye\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nif a == 3:\n    print(\"Hello\")\nprint(\"Goodbye\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Done', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T12:01:25.211Z","updated_at":"2019-09-23T12:02:08.322Z","kind":"exercise"},{"id":1884,"title":null,"prerequisites":null,"position":20,"instructions":"The second `print()` call is outside the `if` statement's body, so it will be printed no matter what. Change line 2 so that `Hello` will be printed only if `a` is equal to `3`. The program should output\n```\nHello\nDone\n```\n","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nif a > 3:\n    print(\"Hello\")\nprint(\"Done\")\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloDone', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a != 7, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\nphanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(code.find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T11:43:07.628Z","updated_at":"2019-09-23T11:54:46.654Z","kind":"exercise"},{"id":1894,"title":null,"prerequisites":null,"position":27,"instructions":"Write program that outputs the following:\n```\nHello\nGoodbye\nDone\n```\n\n`Hello` and `Goodbye` should be printed only if `a` is equal to `3`. `Done` should be printed no matter what. Your code should have three `print()` statements.","solution_code":"a = 3\nif a == 3:\n    print(\"Hello\")\n    print(\"Goodbye\")\nprint(\"Done\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'HelloGoodbyeDone', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(''.join(code.split()).find('ifa==3:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('    print(\"Hello\")') > -1 or code.find('\\tprint(\"Hello\")') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('    print(\"Goodbye\")') > -1 or code.find('\\tprint(\"Goodbye\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T12:04:34.780Z","updated_at":"2019-09-23T12:22:52.009Z","kind":"exercise"},{"id":1895,"title":null,"prerequisites":null,"position":28,"instructions":"Complete the program so that it outputs\n```\nGood job!\nYour score was 95\n```\n\n`Good job!` should be printed only if `score` is greater than `90`. `Your score was 95` should be printed no matter what.\n\nHint: the `if` statement should go before the existing `print()` call.","solution_code":"score = 95\nif score > 90:\n    print(\"Good job!\")\nprint(\"Your score was \" + str(score))\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nscore = 95\nprint(\"Your score was \" + str(score))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Goodjob!Yourscorewas95', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(''.join(code.split()).find('ifscore>90:'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Hello\")') > -1 or code.find('\\tprint(\"Hello\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Goodbye\")') > -1 or code.find('\\tprint(\"Goodbye\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T12:22:22.943Z","updated_at":"2019-09-23T12:28:52.287Z","kind":"exercise"},{"id":1896,"title":null,"prerequisites":null,"position":29,"instructions":"Complete the program so that it outputs\n```\nYour score was 95\nGood job!\n```\n\n`Good job!` should be printed only if `score` is greater than `90`. `Your score was 95` should be printed no matter what.\n\nHint: the `if` statement should go *after* the existing `print()` call.","solution_code":"score = 95\nprint(\"Your score was \" + str(score))\nif score > 90:\n    print(\"Good job!\")\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nscore = 95\nprint(\"Your score was \" + str(score))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Yourscorewas95Goodjob!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(''.join(code.split()).find('ifscore>90:'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Hello\")') > -1 or code.find('\\tprint(\"Hello\")') > -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_test(code.find('    print(\"Goodbye\")') > -1 or code.find('\\tprint(\"Goodbye\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T12:29:01.361Z","updated_at":"2019-09-23T12:31:00.981Z","kind":"exercise"},{"id":1897,"title":null,"prerequisites":null,"position":30,"instructions":"Complete the program so that it outputs\n```\nYour score was 85\nNot bad!\n```\n\n`Not bad!` should be printed only if `score` is greater than `80`. `Your score was 85` should be printed no matter what.\n","solution_code":"score = 85\nprint(\"Your score was \" + str(score))\nif score > 80:\n    print(\"Not bad!\")","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nscore = 85\nprint(\"Your score was \" + str(score))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\n#code = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\" Tests \"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'Yourscorewas85Notbad!', \"Output is correct\", \"Output is incorrect\")\n#phanon_test(a == 2, 'a is correct', \"a isn't correct\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n\n\"\"\" Hidden tests \"\"\"\n#phanon_h_test_not_equal(a, 7)\n#phanon_h_test_equals(a, 3)\nphanon_h_test_greater_than(''.join(code.split()).find('ifscore>80:'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('print(\"Your') > -1, \"Code is correct\", \"Code is incorrect\")\nphanon_test(code.find('    print(\"Not') > -1 or code.find('\\tprint(\"Not\")') > -1, \"Code is correct\", \"Code is incorrect\")\n","course_id":23,"lesson_id":128,"phanon_module_id":null,"created_at":"2019-09-23T12:29:44.604Z","updated_at":"2019-09-23T12:33:52.951Z","kind":"exercise"}]},{"id":117,"title":"12 (10) - strings - format()","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":17,"published":null,"created_at":"2019-09-19T21:42:33.147Z","updated_at":"2019-10-03T20:49:48.904Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1675,"title":null,"prerequisites":null,"position":4,"instructions":"Change the code to output `52.8571`.","solution_code":"print(format(52.85712, \"10.4f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.8571', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"10.4f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:46:23.739Z","updated_at":"2019-09-20T13:09:58.297Z","kind":"exercise"},{"id":1682,"title":null,"prerequisites":null,"position":1,"instructions":"The second argument to `format()` is the format specification. It defines how the value is to be formatted. Change the format specification value `10.2` to `10.4` so that the number is printed to 4 decimal places.","solution_code":"print(format(52.85712, \"10.4f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.8571', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"10.4f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T12:57:02.950Z","updated_at":"2019-09-20T12:59:51.049Z","kind":"exercise"},{"id":1673,"title":null,"prerequisites":null,"position":2,"instructions":"The number after the decimal in the format specification (2, in this case) indicates how many digits to print after the decimal. Change the code to output `52.9`.\n\nNote: `format()` rounds as necessary.","solution_code":"print(format(52.85712, \"10.1f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.9', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"10.1f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:44:42.441Z","updated_at":"2019-09-20T13:08:06.859Z","kind":"exercise"},{"id":1672,"title":null,"prerequisites":null,"position":0,"instructions":"The `format(value, spec)` function formats numbers (among other things) for printing. Change the format specification value `10.2` to `10.3` so that the number is printed to three decimal places.","solution_code":"print(format(52.85712, \"10.3f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.857', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"10.3f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:42:36.237Z","updated_at":"2019-09-20T12:59:27.544Z","kind":"exercise"},{"id":1677,"title":null,"prerequisites":null,"position":6,"instructions":"Change the `10` to another number so that it outputs\n```\n   52.86\n```\n\nThere will be 3 empty spaces before the number for a total of 8 spaces.","solution_code":"print(format(52.85712, \"8.2f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '   52.86\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"8.2f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:49:56.780Z","updated_at":"2019-09-20T13:12:34.480Z","kind":"exercise"},{"id":1681,"title":null,"prerequisites":null,"position":10,"instructions":"Change the `x` and `y` so that the code outputs\n```\n  52.8571\n```\n\nThere will be 2 empty spaces before the number.","solution_code":"s = format(52.85712, \"9.4f\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(52.85712, \"x.yf\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '  52.8571\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(52.85712,\"9.4f\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:54:44.254Z","updated_at":"2019-09-20T13:13:47.967Z","kind":"exercise"},{"id":1678,"title":null,"prerequisites":null,"position":7,"instructions":"Change the `10` to another number so that it outputs\n```\n    52.9\n```\n\nThere will be 4 empty spaces before the number.","solution_code":"print(format(52.85712, \"8.1f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.1f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '    52.9\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"8.1f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:51:42.146Z","updated_at":"2019-09-20T13:12:53.756Z","kind":"exercise"},{"id":1686,"title":null,"prerequisites":null,"position":14,"instructions":"Replace the `x` with a format string to output\n```\n52.857 \n```\n\nThere will be 1 empty space after the number.","solution_code":"s = format(52.85712, \"<7.3f\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(52.85712, x)\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.857 \\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(52.85712,\"<7.3f\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:45:16.102Z","updated_at":"2019-09-20T13:47:44.619Z","kind":"exercise"},{"id":1679,"title":null,"prerequisites":null,"position":8,"instructions":"Change the `x` and `y` so that the code outputs\n```\n52.86\n```\n\nThere will be 0 empty spaces before the number.","solution_code":"print(format(52.85712, \"5.2f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"x.yf\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.86\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"5.2f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:53:01.675Z","updated_at":"2019-09-20T13:13:16.004Z","kind":"exercise"},{"id":1680,"title":null,"prerequisites":null,"position":9,"instructions":"Change the `x` and `y` so that the code outputs\n```\n 52.857\n```\n\nThere will be 1 empty spaces before the number.","solution_code":"print(format(52.85712, \"7.3f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"x.yf\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ' 52.857\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"7.3f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:54:09.327Z","updated_at":"2019-09-20T13:13:34.476Z","kind":"exercise"},{"id":1683,"title":null,"prerequisites":null,"position":11,"instructions":"We can left-justify the number by putting a `<` at the beginning of the format specification string. Change the `y` so that the code outputs\n```\n52.8571  \n```\n\nThere will be 2 empty spaces *after* the number.","solution_code":"s = format(52.85712, \"<9.4f\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(52.85712, \"<9.yf\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.8571  \\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(52.85712,\"<9.4f\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:41:33.442Z","updated_at":"2019-09-20T13:43:49.786Z","kind":"exercise"},{"id":1684,"title":null,"prerequisites":null,"position":12,"instructions":"Left-justify the number to output\n```\n52.8571  \n```\n\nThere will be 2 empty spaces *after* the number.","solution_code":"s = format(52.85712, \"<9.4f\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(52.85712, \"9.4f\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.8571  \\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(52.85712,\"<9.4f\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:44:09.402Z","updated_at":"2019-09-20T13:44:36.629Z","kind":"exercise"},{"id":1676,"title":null,"prerequisites":null,"position":5,"instructions":"The number before the decimal in the format specification indicates how many spaces the number should take. Run the code. The number takes up exactly 10 spaces, with the first 5 being filled in with empty spaces. Change the `10` to a `6` to output\n```\n 52.86\n```\n\nNotice that there will be one empty space before the number so that it takes up exactly 6 spaces.","solution_code":"print(format(52.85712, \"6.2f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ' 52.86\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"6.2f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:46:55.031Z","updated_at":"2019-09-20T13:11:34.963Z","kind":"exercise"},{"id":1688,"title":null,"prerequisites":null,"position":16,"instructions":"`format()` will also convert to percentages. Change the format specifier string so that only 1 digit after the decimal is shown, to output\n```\n 85.7%\n```\n\nThere will be 1 empty space before the number. The total number of characters (6, in this case) includes the % character.","solution_code":"s = format(.85712, \"6.1%\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(.85712, \"6.2%\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ' 85.7%\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(.85712,\"6.1%\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:49:38.426Z","updated_at":"2019-09-20T13:53:43.427Z","kind":"exercise"},{"id":1690,"title":null,"prerequisites":null,"position":18,"instructions":"`format()` can also determine how many spaces to fit a string into.\nChange the `4` in the format specifier string to output\n```\n  ABC\n```\n\nThere will be 2 empty spaces before the string. **Note:** by default the string format specifier left-justifies strings (the opposite of numbers!). So we added a `>` to right-justify the string.","solution_code":"s = format(\"ABC\", \">5s\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(\"ABC\", \">4s\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '  ABC\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(\"ABC\",\">5s\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:56:09.528Z","updated_at":"2019-09-20T14:00:12.580Z","kind":"exercise"},{"id":1674,"title":null,"prerequisites":null,"position":3,"instructions":"Change the code to output `52.9`.\n\nNote: the `f` at the end of the format specifier string means \"float\", or \"number with a decimal\".","solution_code":"print(format(52.85712, \"10.1f\"))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(format(52.85712, \"10.2f\"))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.9', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(format(52.85712,\"10.1f\"))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-19T21:46:01.049Z","updated_at":"2019-09-20T14:14:14.926Z","kind":"exercise"},{"id":1689,"title":null,"prerequisites":null,"position":17,"instructions":"Change the `y` in the format specifier string to output\n```\n  85.71%\n```\n\nThere will be 2 empty spaces before the number. Note that we're using a `%` sign at the end of the format specifier string instead of an `f` like we were doing before.","solution_code":"s = format(.85712, \"8.2%\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(.85712, \"8.y%\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '  85.71%\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(.85712,\"8.2%\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:53:45.544Z","updated_at":"2019-09-20T14:14:58.456Z","kind":"exercise"},{"id":1694,"title":null,"prerequisites":null,"position":21,"instructions":"Change `x` and `y` in the format specifier string to output\n```\n  33.3\n   7.5\n   3.1\n 100.2\n```\n\nThere will be 1 empty space before `100.2`.","solution_code":"a = 33.289\nb = 7.47262\nc = 3.14159\nd = 100.18\nspec = \"6.1f\"\nprint(format(a, spec))\nprint(format(b, spec))\nprint(format(c, spec))\nprint(format(d, spec))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 33.289\nb = 7.47262\nc = 3.14159\nd = 100.18\nspec = \"x.yf\"\nprint(format(a, spec))\nprint(format(b, spec))\nprint(format(c, spec))\nprint(format(d, spec))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '  33.3\\n   7.5\\n   3.1\\n 100.2\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('spec=\"6.1f\"'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T14:16:56.502Z","updated_at":"2019-09-20T14:16:56.514Z","kind":"exercise"},{"id":1687,"title":null,"prerequisites":null,"position":15,"instructions":"Replace the `x` with a format string to output\n```\n 52.857\n```\n\nThere will be 1 empty space before the number.\n\nHeads up: note that this is right-justified.","solution_code":"s = format(52.85712, \"7.3f\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(52.85712, x)\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == ' 52.857\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(52.85712,\"7.3f\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:48:07.980Z","updated_at":"2019-09-20T14:25:12.914Z","kind":"exercise"},{"id":1692,"title":null,"prerequisites":null,"position":20,"instructions":"Change the format specifier string to output\n```\n  January\n February\n    March\n    April\n```\n\nThere will be 1 empty space before `February`.","solution_code":"a = \"January\"\nb = \"February\"\nc = \"March\"\nd = \"April\"\nspec = \">9s\"\nprint(format(a, spec))\nprint(format(b, spec))\nprint(format(c, spec))\nprint(format(d, spec))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = \"January\"\nb = \"February\"\nc = \"March\"\nd = \"April\"\nspec = \">8s\"\nprint(format(a, spec))\nprint(format(b, spec))\nprint(format(c, spec))\nprint(format(d, spec))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '  January\\n February\\n    March\\n    April\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('spec=\">9s\"'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T14:01:33.851Z","updated_at":"2019-09-20T14:18:50.445Z","kind":"exercise"},{"id":1685,"title":null,"prerequisites":null,"position":13,"instructions":"Replace the `x` with a format string to output\n```\n52.8571  \n```\n\nThere will be 2 empty spaces after the number.\n\nHeads up: don't forget to put an `f` at the end of the format specifier string! Also, don't forget the `<` to left-justify","solution_code":"s = format(52.85712, \"<9.4f\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(52.85712, x)\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '52.8571  \\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(52.85712,\"<9.4f\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T13:44:45.380Z","updated_at":"2019-09-20T14:24:05.868Z","kind":"exercise"},{"id":1691,"title":null,"prerequisites":null,"position":19,"instructions":"Change the `4` in the format specifier string to output\n```\nABC  \n```\n\nThere will be 2 empty spaces after the string (we've included a `<` to left-justify the string). Note that we're using an `s` (meaning \"string\") at the end of the format specifier string instead of `f` or `%`.","solution_code":"s = format(\"ABC\", \"<5s\")\nprint(s)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\ns = format(\"ABC\", \"<4s\")\nprint(s)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == 'ABC  \\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('format(\"ABC\",\"<5s\")'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T14:00:22.635Z","updated_at":"2019-09-20T14:27:14.141Z","kind":"exercise"},{"id":1693,"title":null,"prerequisites":null,"position":22,"instructions":"Write code to output\n```\n  33.3\n   7.5\n   3.1\n 100.2\n```\n\nThere will be 1 empty space before `100.2`.\nYou must use the `format()` function to format `a`, `b`, `c`, and `d`.\nYou must create a variable called `spec` that hold the format specifier string.\nDon't get fancy -- just use multiple `print()` statements like in the previous exercise.\n\nHeads up: the format specifier string should end in an `f`.","solution_code":"a = 33.289\nb = 7.47262\nc = 3.14159\nd = 100.18\nspec = \"6.1f\"\nprint(format(a, spec))\nprint(format(b, spec))\nprint(format(c, spec))\nprint(format(d, spec))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 33.289\nb = 7.47262\nc = 3.14159\nd = 100.18\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\n#output = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '  33.3\\n   7.5\\n   3.1\\n 100.2\\n', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('spec=\"'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(format(a,spec))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":117,"phanon_module_id":null,"created_at":"2019-09-20T14:11:10.574Z","updated_at":"2019-09-20T14:31:22.354Z","kind":"exercise"}]},{"id":107,"title":"9 (1) - useful functions - fabs, ceil, floor","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":14,"published":null,"created_at":"2019-09-16T14:04:06.092Z","updated_at":"2019-10-03T20:49:55.236Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1474,"title":null,"prerequisites":null,"position":1,"instructions":"Use `math.fabs` on line 4 to complete the program. It should output `4.0`.","solution_code":"import math\n\na = -4\nabs_a = math.fabs(a)\nprint(abs_a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = -4\nabs_a = \nprint(abs_a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 0, 'a')\nphanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -4)\nphanon_h_test_greater_than(code.find('print(abs_a)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:10:49.256Z","updated_at":"2019-09-16T14:12:35.217Z","kind":"exercise"},{"id":1477,"title":null,"prerequisites":null,"position":4,"instructions":"The following code fails to import the `math` library. Fix it by adding an `import` statement (see previous exercise for a hint).","solution_code":"import math\n\na = -4\nprint(math.fabs(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = -4\nprint(math.fabs(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -4)\nphanon_h_test_greater_than(code.find('print(math.fabs(a))'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:16:46.857Z","updated_at":"2019-09-16T14:18:09.369Z","kind":"exercise"},{"id":1476,"title":null,"prerequisites":null,"position":3,"instructions":"Change line 4 so that `4.0` is output. Do this by changing the call to `abs` to `math.fabs`.","solution_code":"import math\n\na = -4\nprint(math.fabs(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = -4\nprint(abs(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -4)\nphanon_h_test_greater_than(code.find('print(math.fabs(a))'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:14:42.989Z","updated_at":"2019-09-16T14:21:47.374Z","kind":"exercise"},{"id":1478,"title":null,"prerequisites":null,"position":5,"instructions":"Fix the code so that `4.0` is output.","solution_code":"import math\n\na = -4\nprint(math.fabs(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = -4\nprint(math.fabs(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -4)\nphanon_h_test_greater_than(code.find('print(math.fabs(a))'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:18:14.851Z","updated_at":"2019-09-16T14:18:41.397Z","kind":"exercise"},{"id":1475,"title":null,"prerequisites":null,"position":2,"instructions":"Note that the `abs()` function also returns a float if the number given to it is a float. Change line 1 so that `4.9` is output.","solution_code":"a = -4.9\nprint(abs(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = -4.3\nprint(abs(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.9', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -4.9)\n#phanon_h_test_greater_than(code.find('print(abs_a)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:12:40.319Z","updated_at":"2019-09-16T14:14:38.950Z","kind":"exercise"},{"id":1473,"title":null,"prerequisites":null,"position":0,"instructions":"`math.fabs()` returns the absolute value as a float, not an integer, even if the number given to it is an integer. Change line 3 so that `5.0` is output. Make sure `a` is still an integer.","solution_code":"import math\n\na = -5\nabs_a = math.fabs(a)\nprint(abs_a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = -4\nabs_a = math.fabs(a)\nprint(abs_a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '5.0', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 0, 'a')\nphanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(abs_a)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:04:11.628Z","updated_at":"2019-09-16T14:21:21.046Z","kind":"exercise"},{"id":1479,"title":null,"prerequisites":null,"position":6,"instructions":"Add code to lines 1 and 4 so that `6.0` is output. You should use the `math.fabs` function to find and print the absolute value of `a` on line 4.","solution_code":"import math\n\na = -6\nprint(math.fabs(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n\na = -6\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '6.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('print(math.fabs(a))'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:18:58.613Z","updated_at":"2019-09-16T14:22:08.498Z","kind":"exercise"},{"id":1481,"title":null,"prerequisites":null,"position":8,"instructions":"The `math.ceil` function rounds a number up, but doesn't change it if it is already an integral value. Change the value of `a` to 4.0 so that `4.0` is output.","solution_code":"import math\n\na = 4.0\nprint(math.ceil(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 2.0\nprint(math.ceil(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\nphanon_test_equals(a, 4.0, 'a')\n#phanon_test_less_than(a, 4.1, 'a')\n#phanon_test_greater_than(a, 3, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('print(math.ceil(a))'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:24:32.223Z","updated_at":"2019-09-16T14:29:17.952Z","kind":"exercise"},{"id":1482,"title":null,"prerequisites":null,"position":9,"instructions":"Change line 3 so that `16.0` is output. ","solution_code":"import math\n\na = 15.5\nprint(math.ceil(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 2.3\nprint(math.ceil(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '16.0', \"Output is correct\", \"Output is incorrect\")\nphanon_h_test_less_than(a, 16.1)\nphanon_h_test_greater_than(a, 15)\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('print(math.ceil(a))'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:26:10.614Z","updated_at":"2019-09-16T14:29:18.931Z","kind":"exercise"},{"id":1487,"title":null,"prerequisites":null,"position":14,"instructions":"Fill in line 4 with either `math.ceil` or `math.floor` so that `5.0` is output.","solution_code":"import math\n\na = 4.2\nb = math.ceil(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 4.2\nb = \nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '5.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 5.0, 'a')\n#phanon_test_greater_than(a, 3.9, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 4.2)\nphanon_h_test_equals(b, 5.0)\nphanon_h_test_greater_than(code.find('b=math.ceil(a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:34:49.685Z","updated_at":"2019-09-16T14:35:07.748Z","kind":"exercise"},{"id":1483,"title":null,"prerequisites":null,"position":10,"instructions":"This program should print `16.0`. Fix the bug.\n\nHint: an `import` statement is missing.","solution_code":"import math\n\na = 15.5\nprint(math.ceil(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 15.5\nprint(math.ceil(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '16.0', \"Output is correct\", \"Output is incorrect\")\nphanon_h_test_less_than(a, 16.1)\nphanon_h_test_greater_than(a, 15)\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('print(math.ceil(a))'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:27:51.963Z","updated_at":"2019-09-16T14:29:19.744Z","kind":"exercise"},{"id":1486,"title":null,"prerequisites":null,"position":13,"instructions":"Fill in line 4 with either `math.ceil` or `math.floor` so that `5.0` is output.","solution_code":"import math\n\na = 4.8\nb = math.ceil(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 4.8\nb = \nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '5.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 5.0, 'a')\n#phanon_test_greater_than(a, 3.9, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 4.8)\nphanon_h_test_equals(b, 5.0)\nphanon_h_test_greater_than(code.find('b=math.ceil(a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:33:12.494Z","updated_at":"2019-09-16T14:34:41.182Z","kind":"exercise"},{"id":1480,"title":null,"prerequisites":null,"position":7,"instructions":"The `math.ceil` function rounds a number up. Change line 3 so that `4.0` is output. ","solution_code":"import math\n\na = 3.3\nprint(math.ceil(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 2.3\nprint(math.ceil(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 4.1, 'a')\nphanon_test_greater_than(a, 3, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('print(math.ceil(a))'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:20:40.510Z","updated_at":"2019-09-16T14:26:39.216Z","kind":"exercise"},{"id":1485,"title":null,"prerequisites":null,"position":12,"instructions":"Fill in line 4 with either `math.ceil` or `math.floor` so that `5.0` is output.","solution_code":"import math\n\na = 5.2\nb = math.floor(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 5.2\nb = \nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_h_test_equals(a, 5.2)\nphanon_h_test_equals(b, 5.0)\nphanon_test(output == '5.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 5.0, 'a')\n#phanon_test_greater_than(a, 3.9, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('b=math.floor(a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:31:03.240Z","updated_at":"2019-09-16T14:34:03.408Z","kind":"exercise"},{"id":1484,"title":null,"prerequisites":null,"position":11,"instructions":"The `math.floor` function rounds a number down. Change line 3 so that `4.0` is output. ","solution_code":"import math\n\na = 4.8\nprint(math.floor(a))","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 5.2\nprint(math.floor(a))\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 5.0, 'a')\nphanon_test_greater_than(a, 3.9, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, -6)\nphanon_h_test_greater_than(code.find('print(math.floor(a))'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:29:16.706Z","updated_at":"2019-09-16T14:31:46.715Z","kind":"exercise"},{"id":1488,"title":null,"prerequisites":null,"position":15,"instructions":"Fill in line 4 with either `math.ceil` or `math.floor` so that `14.0` is output.","solution_code":"import math\n\na = 14.2\nb = math.floor(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nimport math\n\na = 14.2\nb = \nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '14.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 5.0, 'a')\n#phanon_test_greater_than(a, 3.9, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 14.2)\nphanon_h_test_equals(b, 14.0)\nphanon_h_test_greater_than(code.find('b=math.floor(a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:35:55.479Z","updated_at":"2019-09-16T14:36:51.531Z","kind":"exercise"},{"id":1489,"title":null,"prerequisites":null,"position":16,"instructions":"Fix the bug. `14.0` should be output.","solution_code":"import math\n\na = 14.2\nb = math.floor(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n\na = 14.2\nb = \nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '14.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 5.0, 'a')\n#phanon_test_greater_than(a, 3.9, 'a')\n#phanon_test(type(a) == int, \"a is an integer\", \"a must be an integer\")\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 14.2)\nphanon_h_test_equals(b, 14.0)\nphanon_h_test_greater_than(code.find('b=math.floor(a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('importmath'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":107,"phanon_module_id":null,"created_at":"2019-09-16T14:45:06.313Z","updated_at":"2019-09-16T14:45:30.873Z","kind":"exercise"}]},{"id":103,"title":"8 (1) - useful functions - abs, min, max, pow, round","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":13,"published":null,"created_at":"2019-09-12T21:33:46.462Z","updated_at":"2019-10-03T20:49:56.644Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1441,"title":null,"prerequisites":null,"position":10,"instructions":"Change the value of `a` so that `21` is output. You may change `a` to be any number as long as `21` is output.","solution_code":"a = 21.3\nb = round(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3.4\nb = round(a)\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '21.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(b, 21, 'b')\nphanon_test_less_than(a, 21.5, 'a')\nphanon_test_greater_than(a, 20.4, 'a')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\n#phanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('pow(b,a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('print(result)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T22:01:43.138Z","updated_at":"2019-09-12T22:02:40.667Z","kind":"exercise"},{"id":1439,"title":null,"prerequisites":null,"position":8,"instructions":"Change line 3 so that `9` is output. You may not change the values of `a` or `b`. You will need to change the order of the variables in the call to `pow()`.\n","solution_code":"a = 2\nb = 3\nresult = pow(b, a)\nprint(result)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 2\nb = 3\nresult = pow(a, b)\nprint(result)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '9', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(a, 2, 'a')\nphanon_test_equals(b, 3, 'b')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\n#phanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('pow(b,a)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(result)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:54:49.225Z","updated_at":"2019-09-12T21:57:20.932Z","kind":"exercise"},{"id":1442,"title":null,"prerequisites":null,"position":11,"instructions":"You can include a second argument in the call to `round()`. This is the number of decimal places you wish to round to. Change line 2 so that `3.14` is output.\n\nHint: change the value of `num_dec` to 2.","solution_code":"a = 3.14159\nnum_dec = 2\nb = round(a, num_dec)\nprint(b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3.14159\nnum_dec = 3\nb = round(a, num_dec)\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '3.14', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(b, 3.14, 'b')\nphanon_test_equals(num_dec, 2, 'num_dec')\n#phanon_test_less_than(a, 4.5, 'a')\n#phanon_test_greater_than(a, 3.4, 'a')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\n#phanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('pow(b,a)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(b)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T22:02:38.995Z","updated_at":"2019-09-12T22:04:49.192Z","kind":"exercise"},{"id":1440,"title":null,"prerequisites":null,"position":9,"instructions":"`round()` rounds a number. With only one argument it rounds the number to the nearest integer. Change the value of `a` so that `4` is output. You may change `a` to be any number as long as `4` is output.","solution_code":"a = 4.4\nb = round(a)\nprint(b)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3.4\nb = round(a)\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '4.0', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(b, 4, 'b')\nphanon_test_less_than(a, 4.5, 'a')\nphanon_test_greater_than(a, 3.4, 'a')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\n#phanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('pow(b,a)'), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('print(result)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:57:33.175Z","updated_at":"2019-09-12T22:01:38.683Z","kind":"exercise"},{"id":1443,"title":null,"prerequisites":null,"position":12,"instructions":"Change line 2 so that `3.1416` is output.\n","solution_code":"a = 3.14159\nnum_dec = 4\nb = round(a, num_dec)\nprint(b)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3.14159\nnum_dec = 3\nb = round(a, num_dec)\nprint(b)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '3.1416', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(b, 3.1416, 'b')\n#phanon_test_less_than(a, 4.5, 'a')\n#phanon_test_greater_than(a, 3.4, 'a')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\n#phanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('pow(b,a)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(b)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_equals(num_dec, 4, 'num_dec')\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T22:05:05.020Z","updated_at":"2019-09-12T22:05:53.891Z","kind":"exercise"},{"id":1432,"title":null,"prerequisites":null,"position":1,"instructions":"On line 2 add code to compute the absolute value of `a` and assign it to the variable `abs_a`. Your program should output `5`.","solution_code":"a = -5\nabs_a = abs(a)\nprint(abs_a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = -5\n\nprint(abs_a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '5', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 0, 'a')\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(abs_a)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:37:52.422Z","updated_at":"2019-09-12T21:38:43.833Z","kind":"exercise"},{"id":1430,"title":null,"prerequisites":null,"position":0,"instructions":"`abs()` returns the absolute value of a number. Change line 1 to output `5`. `a` must be a negative number.","solution_code":"a = -5\nabs_a = abs(a)\nprint(abs_a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = -4\nabs_a = abs(a)\nprint(abs_a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '5', \"Output is correct\", \"Output is incorrect\")\nphanon_test_less_than(a, 0, 'a')\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, -5)\nphanon_h_test_greater_than(code.find('print(abs_a)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:34:02.011Z","updated_at":"2019-09-12T21:37:49.420Z","kind":"exercise"},{"id":1433,"title":null,"prerequisites":null,"position":2,"instructions":"`min()` finds the minimum value of numbers. Change line 1 so that `5` is output.","solution_code":"a = 5\nb = 7\nmin_val = min(a, b)\nprint(min_val)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = 7\nmin_val = min(a, b)\nprint(min_val)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '5', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 5)\nphanon_h_test_greater_than(code.find('min(a,b)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(min_val)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:38:49.762Z","updated_at":"2019-09-12T21:41:17.154Z","kind":"exercise"},{"id":1434,"title":null,"prerequisites":null,"position":3,"instructions":"Change line 2 so that `1` is output. Heads up: change only line 2!","solution_code":"a = 4\nb = 1\nmin_val = min(a, b)\nprint(min_val)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = 7\nmin_val = min(a, b)\nprint(min_val)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '1', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(b, 1)\nphanon_h_test_greater_than(code.find('min(a,b)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(min_val)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:40:52.137Z","updated_at":"2019-09-12T21:42:37.968Z","kind":"exercise"},{"id":1435,"title":null,"prerequisites":null,"position":4,"instructions":"`min()` can take more than two arguments. Change line 1 so that `1` is output.","solution_code":"a = 1\nb = 7\nc = 2\nmin_val = min(a, b, c)\nprint(min_val)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 4\nb = 7\nc = 2\nmin_val = min(a, b, c)\nprint(min_val)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '1', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\n#phanon_test_equals(output, '[0, 1, 2, 3]', \"output\")\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\nphanon_h_test_equals(a, 1)\nphanon_h_test_greater_than(code.find('min(a,b,c)'), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(min_val)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:42:47.661Z","updated_at":"2019-09-12T21:43:41.550Z","kind":"exercise"},{"id":1436,"title":null,"prerequisites":null,"position":5,"instructions":"Create four variables, `a=4`, `b=8`, `c=2`, and `d=17`. Using the `min()` function, create another variable called `min_val` that is the minimum of the other four variables. Then write a `print()` statement that prints `min_val`.","solution_code":"a = 4\nb = 8\nc = 2\nd = 17\nmin_val = min(a, b, c, d)\nprint(min_val)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '2', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(a, 4, 'a')\nphanon_test_equals(b, 8, 'b')\nphanon_test_equals(c, 2, 'c')\nphanon_test_equals(d, 17, 'd')\nphanon_test_equals(min_val, 2, 'min_val')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\nphanon_h_test_greater_than(code.find('min('), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(min_val)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:44:21.272Z","updated_at":"2019-09-12T21:47:36.174Z","kind":"exercise"},{"id":1438,"title":null,"prerequisites":null,"position":7,"instructions":"`pow()` raises a number to a power. Change line 1 so that `8` is output.\n\nHint: 2<sup>2</sup>=4 and 2<sup>3</sup>=8.","solution_code":"p = 3\nresult = pow(2, p)\nprint(result)\n","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\np = 2\nresult = pow(2, p)\nprint(result)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '8', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(p, 3, 'p')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\n#phanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\n#phanon_h_test_greater_than(code.find('print(max_val)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:49:27.777Z","updated_at":"2019-09-12T21:52:43.244Z","kind":"exercise"},{"id":1437,"title":null,"prerequisites":null,"position":6,"instructions":"Create four variables, `a=4`, `b=8`, `c=2`, and `d=17`. Using the `max()` function (which is a lot like `min()` but finds the maximum value), create another variable called `max_val` that is the maximum of the other four variables. Then write a `print()` statement that prints `max_val`.","solution_code":"a = 4\nb = 8\nc = 2\nd = 17\nmax_val = max(a, b, c, d)\nprint(max_val)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\n\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\nphanon_test(output == '17', \"Output is correct\", \"Output is incorrect\")\n#phanon_test_less_than(a, 0, 'a')\nphanon_test_equals(a, 4, 'a')\nphanon_test_equals(b, 8, 'b')\nphanon_test_equals(c, 2, 'c')\nphanon_test_equals(d, 17, 'd')\nphanon_test_equals(max_val, 17, 'max_val')\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n#phanon_h_test_equals(a, 1)\nphanon_h_test_greater_than(code.find('max('), -1, \"Code is correct\", \"Code is incorrect\")\nphanon_h_test_greater_than(code.find('print(max_val)'), -1, \"Code is correct\", \"Code is incorrect\")\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":103,"phanon_module_id":null,"created_at":"2019-09-12T21:47:45.697Z","updated_at":"2019-09-12T21:49:04.059Z","kind":"exercise"}]},{"id":81,"title":"1b - variables II","prerequisites":null,"course_id":null,"phanon_module_id":29,"position":2,"published":null,"created_at":"2019-09-09T15:16:06.238Z","updated_at":"2020-01-21T22:54:56.419Z","open_date":null,"close_date":null,"due_date":null,"permit_paste":false,"type":"lesson","exercises":[{"id":1102,"title":null,"prerequisites":null,"position":3,"instructions":"Create a variable `myvar` by assigning 5 to it.\n","solution_code":"myvar = 5\nprint(myvar)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(myvar)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(myvar, 5, 'myvar')\nphanon_test(output == '5', 'output is correct', 'output is incorrect')\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:21:10.222Z","updated_at":"2019-09-09T15:22:27.640Z","kind":"exercise"},{"id":1101,"title":null,"prerequisites":null,"position":2,"instructions":"Create a variable `a` by assigning 14 to it.\n","solution_code":"a = 14\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(a, 14, 'a')\nphanon_test(output == '14', 'output is correct', 'output is incorrect')\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:20:33.125Z","updated_at":"2019-09-09T15:21:02.761Z","kind":"exercise"},{"id":1099,"title":null,"prerequisites":null,"position":1,"instructions":"Create a variable `a` by assigning 4 to it. This must be done before the print statement.\n","solution_code":"a = 4\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(a)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(a, 4, 'a')\nphanon_test(output == '4', 'output is correct', 'output is incorrect')\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:19:11.925Z","updated_at":"2019-09-09T15:20:52.960Z","kind":"exercise"},{"id":1103,"title":null,"prerequisites":null,"position":4,"instructions":"`b` is used before it is defined. Fix the bug.\n\nHint: move line 4 up one line.","solution_code":"a = 3\nprint(a)\nb = 4\nprint(b)\nc = 5\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\nprint(b)\nb = 4\nc = 5\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\n#phanon_test_equals(myvar, 5, 'myvar')\nphanon_test(output == '345', 'output is correct', 'output is incorrect')\nphanon_h_test_greater_than(code.find('print(a)'), -1)\nphanon_h_test_greater_than(code.find('a=3'), -1)\nphanon_h_test_greater_than(code.find('b=4'), -1)\nphanon_h_test_greater_than(code.find('c=5'), -1)\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:22:30.256Z","updated_at":"2019-09-09T15:37:14.428Z","kind":"exercise"},{"id":1098,"title":null,"prerequisites":null,"position":0,"instructions":"Run the code to see there's an error. Variables must be defined before they are used. Fix the bug.\n\nHint: swap the lines (move line 2 up to line 1).","solution_code":"a = 3\nprint(a)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\nprint(a)\na = 3\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\nphanon_test_equals(a, 3, 'a')\nphanon_test(output == '3', 'output is correct', 'output is incorrect')\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:16:25.133Z","updated_at":"2019-09-09T15:19:07.103Z","kind":"exercise"},{"id":1104,"title":null,"prerequisites":null,"position":5,"instructions":"Define `b`. Do this immediately before it is used, no earlier.\n\nHint: `b` should be defined and assigned on line 3","solution_code":"a = 3\nprint(a)\nb = 4\nprint(b)\nc = 5\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nprint(a)\nprint(b)\nc = 5\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\n#phanon_test_equals(myvar, 5, 'myvar')\nphanon_test(output == '345', 'output is correct', 'output is incorrect')\nphanon_h_test_greater_than(code.find('print(a)'), -1)\nphanon_h_test_greater_than(code.find('a=3'), -1)\nphanon_h_test_greater_than(code.find('b=4'), -1)\nphanon_h_test_greater_than(code.find('c=5'), -1)\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:37:15.509Z","updated_at":"2019-09-09T15:38:07.421Z","kind":"exercise"},{"id":1105,"title":null,"prerequisites":null,"position":6,"instructions":"Note that the code works perfectly well. Move the definition of `b` to be before the definition of `a`.\n\nHint: swap lines 1 and 2.","solution_code":"b = 4\na = 3\nprint(a)\nprint(b)\nc = 5\nprint(c)","solution_tests_passing":true,"test_code":"### BEGIN_STUDENT\na = 3\nb = 4\nprint(a)\nprint(b)\nc = 5\nprint(c)\n### END_STUDENT\n\noutput = phanon_get_stdout()\ncode = phanon_get_program()\n# remove whitespace from code\ncode = ''.join(code.split())\noutput = ''.join(output.split())\n\n\"\"\"\nTests\n\"\"\"\n# phanon_test_pass(\"Success output\")\n# phanon_test_fail(\"Failure output\")\n# phanon_test(conditionOfPassing, \"Success output\", \"Failure output\")\n#phanon_test_equals(myvar, 5, 'myvar')\nphanon_test(output == '345', 'output is correct', 'output is incorrect')\nphanon_h_test_greater_than(code.find('b=4a=3print(a)print(b)'), -1)\n\n# phanon_test_greater_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_less_than(actualValue, expectedValue, \"identifierName\")\n# phanon_test_presence(value, \"identifierName\")\n# phanon_test_not_empty(value, \"identifierName\")\n\n\"\"\"\nHidden tests\nStudents will not see any output indicating what caused the failure\nonly that a test failed\n\"\"\"\n# phanon_h_test_equals(actualValue, expectedValue)\n# phanon_h_test_greater_than(actualValue, expectedValue)\n# phanon_h_test_less_than(actualValue, expectedValue)\n# phanon_h_test_presence(value)\n# phanon_h_test_not_empty(value)\n","course_id":23,"lesson_id":81,"phanon_module_id":null,"created_at":"2019-09-09T15:38:18.884Z","updated_at":"2019-09-09T15:39:46.678Z","kind":"exercise"}]}],"projects":[]}